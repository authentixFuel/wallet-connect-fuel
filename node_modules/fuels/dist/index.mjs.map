{"version":3,"sources":["../src/index.ts","../src/cli/utils/createConfig.ts","../src/cli/types.ts"],"sourcesContent":["export { Script } from '@fuel-ts/script';\nexport * from './cli/index';\nexport * from '@fuel-ts/abi-coder';\nexport * from '@fuel-ts/address';\nexport * from '@fuel-ts/address/configs';\nexport * from '@fuel-ts/contract';\nexport * from '@fuel-ts/crypto';\nexport * from '@fuel-ts/hasher';\nexport * from '@fuel-ts/interfaces';\nexport * from '@fuel-ts/math';\nexport * from '@fuel-ts/math/configs';\nexport * from '@fuel-ts/program';\nexport * from '@fuel-ts/program/configs';\nexport * from '@fuel-ts/transactions';\nexport * from '@fuel-ts/utils';\nexport * from '@fuel-ts/account';\nexport * from '@fuel-ts/transactions/configs';\nexport * from '@fuel-ts/account/configs';\n","import type { UserFuelsConfig } from '../types';\n\nexport function createConfig(config: UserFuelsConfig) {\n  return config;\n}\n","import type { DeployContractOptions } from '@fuel-ts/contract';\n\nexport enum Commands {\n  build = 'build',\n  deploy = 'deploy',\n  dev = 'dev',\n  init = 'init',\n}\n\nexport type CommandEvent =\n  | {\n      type: Commands.build;\n      data: unknown;\n    }\n  | {\n      type: Commands.deploy;\n      data: DeployedContract[];\n    }\n  | {\n      type: Commands.dev;\n      data: unknown;\n    }\n  | {\n      type: Commands.init;\n      data: unknown;\n    };\n\nexport type DeployedContract = {\n  name: string;\n  contractId: string;\n};\n\nexport type ContractDeployOptions = {\n  contracts: DeployedContract[];\n  contractName: string;\n  contractPath: string;\n};\n\nexport type OptionsFunction = (\n  options: ContractDeployOptions\n) => DeployContractOptions | Promise<DeployContractOptions>;\n\nexport type UserFuelsConfig = {\n  /** Relative directory path to Forc workspace */\n  workspace?: string;\n  /** List of relative directory paths to Sway contracts */\n  contracts?: string[];\n  /** List of relative directory paths to Sway predicates */\n  predicates?: string[];\n  /** List of relative directory paths to Sway scripts */\n  scripts?: string[];\n  /** Relative directory path for generating Typescript definitions */\n  output: string;\n\n  /**\n   * Wallet private key, used when deploying contracts.\n   * Should ideally come from env â€” `process.env.MY_PRIVATE_KEY`\n   */\n  privateKey?: string;\n\n  /**\n   * Contracts will be deployed using this provider.\n   * Default: http://localhost:4000\n   */\n  providerUrl?: string;\n\n  /** Relative filepath to custom `chainConfig.json` to be used when initializing a Fuel Core node */\n  chainConfig?: string;\n\n  /** Static of dyanmic deploy configs to be used when deploying contracts */\n  deployConfig?: DeployContractOptions | OptionsFunction;\n\n  /** Opt-in or out from using builtin Forc binaries */\n  useBuiltinForc?: boolean;\n\n  /** Opt-in or out from using builtin Fuel Core binaries */\n  useBuiltinFuelCore?: boolean;\n\n  /** If set to false, you will need to spin up a Fuel core node by yourself */\n  autoStartFuelCore?: boolean;\n\n  /**\n   * Port to use when starting a `fuel-core` node\n   * Default: first free port, starting from 4000\n   */\n  fuelCorePort?: number;\n\n  /**\n   * Aditional forc build flags to be used when compiling contracts.\n   * Default: []\n   * Example:\n   *  forcBuildFlags: ['--release'];\n   */\n  forcBuildFlags?: string[];\n\n  /**\n   * Function callback, will be called after a successful run\n   * @param event - The event that triggered this execution\n   * @param config - The loaded `fuels.config.ts`\n   */\n  onSuccess?: (event: CommandEvent, config: FuelsConfig) => void;\n\n  /**\n   * Function callback, will be called in case of errors\n   * @param error - Original error object\n   * @param config - Configuration in use\n   */\n  onFailure?: (event: Error, config: FuelsConfig) => void;\n};\n\nexport type FuelsConfig = UserFuelsConfig &\n  Required<\n    Pick<\n      UserFuelsConfig,\n      | 'contracts'\n      | 'predicates'\n      | 'scripts'\n      | 'deployConfig'\n      | 'useBuiltinForc'\n      | 'useBuiltinFuelCore'\n      | 'autoStartFuelCore'\n      | 'providerUrl'\n      | 'forcBuildFlags'\n    >\n  > & {\n    basePath: string;\n    configPath: string;\n    buildMode: 'debug' | 'release';\n  };\n"],"mappings":";AAAA,SAAS,cAAc;;;ACEhB,SAAS,aAAa,QAAyB;AACpD,SAAO;AACT;;;ACFO,IAAK,WAAL,kBAAKA,cAAL;AACL,EAAAA,UAAA,WAAQ;AACR,EAAAA,UAAA,YAAS;AACT,EAAAA,UAAA,SAAM;AACN,EAAAA,UAAA,UAAO;AAJG,SAAAA;AAAA,GAAA;;;AFAZ,cAAc;AACd,cAAc;AACd,cAAc;AACd,cAAc;AACd,cAAc;AACd,cAAc;AACd,cAAc;AACd,cAAc;AACd,cAAc;AACd,cAAc;AACd,cAAc;AACd,cAAc;AACd,cAAc;AACd,cAAc;AACd,cAAc;AACd,cAAc;","names":["Commands"]}