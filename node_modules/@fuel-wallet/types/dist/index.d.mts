import { BNInput, BigNumberish, BN, JsonAbi } from 'fuels';
import { ICreateChange, IUpdateChange, IDeleteChange } from 'dexie-observable/api';
import { JSONRPCRequest, JSONRPCResponse } from 'json-rpc-2.0';
export { Asset, Ethereum as AssetEthereum, Fuel as AssetFuel } from '@fuels/assets';

type AssetData = {
    name?: string;
    assetId: string;
    imageUrl?: string;
    symbol?: string;
    decimals?: number;
    isCustom?: boolean;
    chainId?: number;
    network?: string;
};
type AssetAmount = AssetData & {
    amount?: BNInput;
};

type Coin = {
    assetId: string;
    amount?: BNInput;
};

type Vault = {
    key: string;
    data: string;
};
type Account = {
    name: string;
    address: string;
    vaultId?: number;
    publicKey: string;
    isHidden?: boolean;
    balance?: BigNumberish | BN;
    balanceSymbol?: string;
    balances?: Coin[];
    isCurrent?: boolean;
};
declare enum AddressType {
    contract = 0,
    account = 1
}

type NetworkData = {
    id?: string;
    name: string;
    url: string;
    isSelected?: boolean;
};

type Connection = {
    origin: string;
    title?: string;
    favIconUrl?: string;
    accounts: Array<string>;
};

declare enum MessageTypes {
    ping = "ping",
    uiEvent = "uiEvent",
    event = "event",
    request = "request",
    response = "response",
    removeConnection = "removeConnection"
}
interface MessageSender {
    id?: string | undefined;
    origin?: string | undefined;
    tab?: {
        id?: number | undefined;
        index?: number | undefined;
        windowId?: number | undefined;
        url?: string | undefined;
        title?: string | undefined;
        favIconUrl?: string | undefined;
    };
}
type BaseEvent<T> = {
    readonly target: string;
    readonly connectorName?: string;
    readonly id?: string;
    readonly sender?: MessageSender;
} & T;
type UIEventMessage = BaseEvent<{
    readonly type: MessageTypes.uiEvent;
    readonly ready: boolean;
    readonly session: string;
}>;
type RequestMessage = BaseEvent<{
    readonly type: MessageTypes.request;
    readonly request: JSONRPCRequest;
}>;
type ResponseMessage = BaseEvent<{
    readonly type: MessageTypes.response;
    readonly response: JSONRPCResponse;
}>;
type EventMessageEvents = Array<{
    event: string;
    params: Array<unknown>;
}>;
type EventMessage<T = EventMessageEvents> = BaseEvent<{
    readonly type: MessageTypes.event;
    readonly events: T;
}>;
type CommunicationEventArg<T> = T extends MessageTypes.request ? RequestMessage : T extends MessageTypes.response ? ResponseMessage : T extends MessageTypes.uiEvent ? UIEventMessage : T extends MessageTypes.event ? EventMessage : T extends MessageTypes.removeConnection ? string : unknown;
type CommunicationMessage = UIEventMessage | RequestMessage | ResponseMessage | EventMessage;
type DatabaseEvents = ['delete', 'create', 'update'];
type DatabaseObservableEvent<T extends Array<string>> = `${T[number]}:${DatabaseEvents[number]}`;
type DatabaseEventArg<T extends string> = T extends `${string}:create` ? ICreateChange : T extends `${string}:update` ? IUpdateChange : T extends `${string}:delete` ? IDeleteChange : unknown;
type FuelProviderConfig = {
    id?: string;
    url: string;
};

declare const CONNECTOR_SCRIPT = "FuelConnectorScript";
declare const CONTENT_SCRIPT_NAME = "FuelContentScript";
declare const BACKGROUND_SCRIPT_NAME = "FuelBackgroundScript";
declare const POPUP_SCRIPT_NAME = "FuelPopUpScript";
declare const VAULT_SCRIPT_NAME = "FuelVaultScript";
declare const EVENT_MESSAGE = "message";

type AbiMap = {
    [key: string]: JsonAbi;
};
type AbiTable = {
    contractId: string;
    abi: JsonAbi;
};

interface ErrorInfo {
    /**
     * Captures which component contained the exception, and its ancestors.
     */
    componentStack: string;
}
type FuelWalletError = {
    timestamp?: number;
    id?: string;
    error?: Error | ErrorEvent | {
        message: string;
        stack?: any;
    };
    reactError?: ErrorInfo;
};

export { AbiMap, AbiTable, Account, AddressType, AssetAmount, AssetData, BACKGROUND_SCRIPT_NAME, BaseEvent, CONNECTOR_SCRIPT, CONTENT_SCRIPT_NAME, Coin, CommunicationEventArg, CommunicationMessage, Connection, DatabaseEventArg, DatabaseEvents, DatabaseObservableEvent, EVENT_MESSAGE, EventMessage, EventMessageEvents, FuelProviderConfig, FuelWalletError, MessageSender, MessageTypes, NetworkData, POPUP_SCRIPT_NAME, RequestMessage, ResponseMessage, UIEventMessage, VAULT_SCRIPT_NAME, Vault };
