{"version":3,"sources":["../src/constants.ts","../src/assets.ts","../src/utils/url.ts","../src/utils/resolveIconPath.ts","../src/utils/network.ts","../src/index.ts"],"sourcesContent":["export const CHAIN_IDS = {\n  eth: {\n    sepolia: 11155111,\n    foundry: 31337,\n  },\n  fuel: {\n    beta4: 0,\n    devnet: 10,\n  },\n};\n","import { CHAIN_IDS } from './constants';\nimport type { Assets } from './types';\n\nexport const assets: Assets = [\n  {\n    name: 'Ethereum',\n    symbol: 'ETH',\n    icon: 'eth.svg',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.sepolia,\n        decimals: 18,\n      },\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.foundry,\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.beta4,\n        decimals: 9,\n        assetId:\n          '0x0000000000000000000000000000000000000000000000000000000000000000',\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.devnet,\n        decimals: 9,\n        assetId:\n          '0x0000000000000000000000000000000000000000000000000000000000000000',\n      },\n    ],\n  },\n];\n","const DELIMITER_PATH = '/';\nconst trimRegex = /^\\/|\\/$/g;\nconst trimPath = (path = '') => path.replace(trimRegex, '');\n\nexport function urlJoin(\n  baseUrl: string | undefined,\n  ...paths: Array<string>\n): string {\n  const hasBaseUrl = baseUrl !== null && baseUrl !== undefined;\n  const rootPath = baseUrl?.[0] === '/' && baseUrl.length > 1;\n  const allPaths = [baseUrl, ...paths].filter(Boolean).map(trimPath);\n  if (rootPath && hasBaseUrl) {\n    allPaths.unshift('');\n  }\n  return allPaths.join(DELIMITER_PATH);\n}\n","import type { Assets } from '../types';\n\nimport { urlJoin } from './url';\n\nexport function resolveIconPath(path: string, assets: Assets) {\n  return assets.map((asset) => ({\n    ...asset,\n    icon: urlJoin(path, asset.icon),\n  }));\n}\n","import { CHAIN_IDS } from '../constants';\nimport type { Asset, AssetEth, AssetFuel, Ethereum, Fuel } from '../types';\n\ntype Network = Ethereum | Fuel;\nexport type NetworkTypes = Ethereum['type'] | Fuel['type'];\ntype NetworkTypeToNetwork<T> = T extends 'ethereum'\n  ? Ethereum\n  : T extends 'fuel'\n  ? Fuel\n  : Network;\n\nexport const getDefaultChainId = (\n  networkType: NetworkTypes,\n): number | undefined => {\n  if (networkType === 'ethereum') return CHAIN_IDS.eth.sepolia;\n  if (networkType === 'fuel') return CHAIN_IDS.fuel.beta4;\n\n  return undefined;\n};\n\nexport type GetAssetNetworkParams<T extends NetworkTypes | undefined> = {\n  asset: Asset;\n  chainId?: number;\n  networkType: T;\n};\n\nexport const getAssetNetwork = <T extends NetworkTypes | undefined>({\n  asset,\n  chainId,\n  networkType,\n}: GetAssetNetworkParams<T>): NetworkTypeToNetwork<T> => {\n  const network = asset.networks.find(\n    (network) => network.chainId === chainId && network.type === networkType,\n  ) as NetworkTypeToNetwork<T>;\n\n  return network;\n};\n\n/**\n * Returns the asset with the network information based on the provided parameters.\n * @template T - The network type.\n * @param {GetAssetNetworkParams<T>} params - The parameters to get the asset with network information.\n * @returns {(AssetEth | AssetFuel | undefined)} - The asset with network information or undefined if not found.\n */\nexport const getAssetWithNetwork = <T extends NetworkTypes>({\n  asset,\n  chainId,\n  networkType,\n}: GetAssetNetworkParams<T>): AssetEth | AssetFuel | undefined => {\n  const { networks: _, ...assetRest } = asset;\n\n  const chainIdToUse = chainId ?? getDefaultChainId(networkType);\n  // use two equals(==) cuz we wan't to keep 0 as a valid chainId\n  if (chainIdToUse == undefined) return undefined;\n\n  const assetNetwork = getAssetNetwork({\n    asset,\n    chainId: chainIdToUse,\n    networkType,\n  });\n\n  if (!assetNetwork) return undefined;\n\n  return {\n    ...assetRest,\n    ...assetNetwork,\n  };\n};\n\nexport const getAssetEth = (\n  asset: Asset,\n  chainId?: number,\n): AssetEth | undefined => {\n  return getAssetWithNetwork({\n    asset,\n    networkType: 'ethereum',\n    chainId,\n  }) as AssetEth;\n};\n\nexport const getAssetFuel = (\n  asset: Asset,\n  chainId?: number,\n): AssetFuel | undefined => {\n  return getAssetWithNetwork({\n    asset,\n    networkType: 'fuel',\n    chainId,\n  }) as AssetFuel;\n};\n","import { assets as assetList } from './assets';\nimport { resolveIconPath } from './utils/resolveIconPath';\nexport * from './constants';\nexport * from './utils/network';\nexport * from './utils/resolveIconPath';\nexport * from './types';\n\nexport const assets = assetList;\n\nexport default resolveIconPath(process.env.BASE_URL || './', assetList);\n"],"mappings":";AAAO,IAAM,YAAY;AAAA,EACvB,KAAK;AAAA,IACH,SAAS;AAAA,IACT,SAAS;AAAA,EACX;AAAA,EACA,MAAM;AAAA,IACJ,OAAO;AAAA,IACP,QAAQ;AAAA,EACV;AACF;;;ACNO,IAAM,SAAiB;AAAA,EAC5B;AAAA,IACE,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,UAAU;AAAA,MACR;AAAA,QACE,MAAM;AAAA,QACN,SAAS,UAAU,IAAI;AAAA,QACvB,UAAU;AAAA,MACZ;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS,UAAU,IAAI;AAAA,QACvB,UAAU;AAAA,MACZ;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS,UAAU,KAAK;AAAA,QACxB,UAAU;AAAA,QACV,SACE;AAAA,MACJ;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS,UAAU,KAAK;AAAA,QACxB,UAAU;AAAA,QACV,SACE;AAAA,MACJ;AAAA,IACF;AAAA,EACF;AACF;;;ACnCA,IAAM,iBAAiB;AACvB,IAAM,YAAY;AAClB,IAAM,WAAW,CAAC,OAAO,OAAO,KAAK,QAAQ,WAAW,EAAE;AAEnD,SAAS,QACd,YACG,OACK;AACR,QAAM,aAAa,YAAY,QAAQ,YAAY;AACnD,QAAM,WAAW,UAAU,CAAC,MAAM,OAAO,QAAQ,SAAS;AAC1D,QAAM,WAAW,CAAC,SAAS,GAAG,KAAK,EAAE,OAAO,OAAO,EAAE,IAAI,QAAQ;AACjE,MAAI,YAAY,YAAY;AAC1B,aAAS,QAAQ,EAAE;AAAA,EACrB;AACA,SAAO,SAAS,KAAK,cAAc;AACrC;;;ACXO,SAAS,gBAAgB,MAAcA,SAAgB;AAC5D,SAAOA,QAAO,IAAI,CAAC,WAAW;AAAA,IAC5B,GAAG;AAAA,IACH,MAAM,QAAQ,MAAM,MAAM,IAAI;AAAA,EAChC,EAAE;AACJ;;;ACEO,IAAM,oBAAoB,CAC/B,gBACuB;AACvB,MAAI,gBAAgB;AAAY,WAAO,UAAU,IAAI;AACrD,MAAI,gBAAgB;AAAQ,WAAO,UAAU,KAAK;AAElD,SAAO;AACT;AAQO,IAAM,kBAAkB,CAAqC;AAAA,EAClE;AAAA,EACA;AAAA,EACA;AACF,MAAyD;AACvD,QAAM,UAAU,MAAM,SAAS;AAAA,IAC7B,CAACC,aAAYA,SAAQ,YAAY,WAAWA,SAAQ,SAAS;AAAA,EAC/D;AAEA,SAAO;AACT;AAQO,IAAM,sBAAsB,CAAyB;AAAA,EAC1D;AAAA,EACA;AAAA,EACA;AACF,MAAkE;AAChE,QAAM,EAAE,UAAU,GAAG,GAAG,UAAU,IAAI;AAEtC,QAAM,eAAe,WAAW,kBAAkB,WAAW;AAE7D,MAAI,gBAAgB;AAAW,WAAO;AAEtC,QAAM,eAAe,gBAAgB;AAAA,IACnC;AAAA,IACA,SAAS;AAAA,IACT;AAAA,EACF,CAAC;AAED,MAAI,CAAC;AAAc,WAAO;AAE1B,SAAO;AAAA,IACL,GAAG;AAAA,IACH,GAAG;AAAA,EACL;AACF;AAEO,IAAM,cAAc,CACzB,OACA,YACyB;AACzB,SAAO,oBAAoB;AAAA,IACzB;AAAA,IACA,aAAa;AAAA,IACb;AAAA,EACF,CAAC;AACH;AAEO,IAAM,eAAe,CAC1B,OACA,YAC0B;AAC1B,SAAO,oBAAoB;AAAA,IACzB;AAAA,IACA,aAAa;AAAA,IACb;AAAA,EACF,CAAC;AACH;;;AClFO,IAAMC,UAAS;AAEtB,IAAO,cAAQ,gBAAgB,oCAA8B,MAAS;","names":["assets","network","assets"]}