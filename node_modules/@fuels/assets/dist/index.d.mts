type Ethereum = {
    /** type of network */
    type: 'ethereum';
    /** chain id of the network */
    chainId: number;
    /** number of decimals of the asset */
    decimals: number;
    /** address of the asset contract */
    address?: string;
};
type Fuel = {
    /** type of network */
    type: 'fuel';
    /** chain id of the network */
    chainId: number;
    /** number of decimals of the asset */
    decimals: number;
    /** assetId on the Fuel Network */
    assetId: string;
    /** the contractId of that generated the Asset on the Fuel Network */
    contractId?: string;
};
type Asset = {
    /** name of the asset */
    name: string;
    /** description of the asset */
    symbol: string;
    /** icon of the asset */
    icon: string;
    /** asset id on Fuel Network */
    networks: Array<Ethereum | Fuel>;
};
type Assets = Array<Asset>;
type AssetEth = Omit<Asset, 'networks'> & Ethereum;
type AssetFuel = Omit<Asset, 'networks'> & Fuel;

declare const CHAIN_IDS: {
    eth: {
        sepolia: number;
        foundry: number;
    };
    fuel: {
        beta4: number;
        devnet: number;
    };
};

type Network = Ethereum | Fuel;
type NetworkTypes = Ethereum['type'] | Fuel['type'];
type NetworkTypeToNetwork<T> = T extends 'ethereum' ? Ethereum : T extends 'fuel' ? Fuel : Network;
declare const getDefaultChainId: (networkType: NetworkTypes) => number | undefined;
type GetAssetNetworkParams<T extends NetworkTypes | undefined> = {
    asset: Asset;
    chainId?: number;
    networkType: T;
};
declare const getAssetNetwork: <T extends NetworkTypes | undefined>({ asset, chainId, networkType, }: GetAssetNetworkParams<T>) => NetworkTypeToNetwork<T>;
/**
 * Returns the asset with the network information based on the provided parameters.
 * @template T - The network type.
 * @param {GetAssetNetworkParams<T>} params - The parameters to get the asset with network information.
 * @returns {(AssetEth | AssetFuel | undefined)} - The asset with network information or undefined if not found.
 */
declare const getAssetWithNetwork: <T extends NetworkTypes>({ asset, chainId, networkType, }: GetAssetNetworkParams<T>) => AssetEth | AssetFuel | undefined;
declare const getAssetEth: (asset: Asset, chainId?: number) => AssetEth | undefined;
declare const getAssetFuel: (asset: Asset, chainId?: number) => AssetFuel | undefined;

declare function resolveIconPath(path: string, assets: Assets): {
    icon: string;
    name: string;
    symbol: string;
    networks: (Ethereum | Fuel)[];
}[];

declare const assets: Assets;
declare const _default: {
    icon: string;
    name: string;
    symbol: string;
    networks: (Ethereum | Fuel)[];
}[];

export { Asset, AssetEth, AssetFuel, Assets, CHAIN_IDS, Ethereum, Fuel, GetAssetNetworkParams, NetworkTypes, assets, _default as default, getAssetEth, getAssetFuel, getAssetNetwork, getAssetWithNetwork, getDefaultChainId, resolveIconPath };
