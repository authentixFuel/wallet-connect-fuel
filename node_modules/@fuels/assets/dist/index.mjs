// src/constants.ts
var CHAIN_IDS = {
  eth: {
    sepolia: 11155111,
    foundry: 31337
  },
  fuel: {
    beta4: 0,
    devnet: 10
  }
};

// src/assets.ts
var assets = [
  {
    name: "Ethereum",
    symbol: "ETH",
    icon: "eth.svg",
    networks: [
      {
        type: "ethereum",
        chainId: CHAIN_IDS.eth.sepolia,
        decimals: 18
      },
      {
        type: "ethereum",
        chainId: CHAIN_IDS.eth.foundry,
        decimals: 18
      },
      {
        type: "fuel",
        chainId: CHAIN_IDS.fuel.beta4,
        decimals: 9,
        assetId: "0x0000000000000000000000000000000000000000000000000000000000000000"
      },
      {
        type: "fuel",
        chainId: CHAIN_IDS.fuel.devnet,
        decimals: 9,
        assetId: "0x0000000000000000000000000000000000000000000000000000000000000000"
      }
    ]
  }
];

// src/utils/url.ts
var DELIMITER_PATH = "/";
var trimRegex = /^\/|\/$/g;
var trimPath = (path = "") => path.replace(trimRegex, "");
function urlJoin(baseUrl, ...paths) {
  const hasBaseUrl = baseUrl !== null && baseUrl !== void 0;
  const rootPath = baseUrl?.[0] === "/" && baseUrl.length > 1;
  const allPaths = [baseUrl, ...paths].filter(Boolean).map(trimPath);
  if (rootPath && hasBaseUrl) {
    allPaths.unshift("");
  }
  return allPaths.join(DELIMITER_PATH);
}

// src/utils/resolveIconPath.ts
function resolveIconPath(path, assets3) {
  return assets3.map((asset) => ({
    ...asset,
    icon: urlJoin(path, asset.icon)
  }));
}

// src/utils/network.ts
var getDefaultChainId = (networkType) => {
  if (networkType === "ethereum")
    return CHAIN_IDS.eth.sepolia;
  if (networkType === "fuel")
    return CHAIN_IDS.fuel.beta4;
  return void 0;
};
var getAssetNetwork = ({
  asset,
  chainId,
  networkType
}) => {
  const network = asset.networks.find(
    (network2) => network2.chainId === chainId && network2.type === networkType
  );
  return network;
};
var getAssetWithNetwork = ({
  asset,
  chainId,
  networkType
}) => {
  const { networks: _, ...assetRest } = asset;
  const chainIdToUse = chainId ?? getDefaultChainId(networkType);
  if (chainIdToUse == void 0)
    return void 0;
  const assetNetwork = getAssetNetwork({
    asset,
    chainId: chainIdToUse,
    networkType
  });
  if (!assetNetwork)
    return void 0;
  return {
    ...assetRest,
    ...assetNetwork
  };
};
var getAssetEth = (asset, chainId) => {
  return getAssetWithNetwork({
    asset,
    networkType: "ethereum",
    chainId
  });
};
var getAssetFuel = (asset, chainId) => {
  return getAssetWithNetwork({
    asset,
    networkType: "fuel",
    chainId
  });
};

// src/index.ts
var assets2 = assets;
var src_default = resolveIconPath("https://cdn.fuel.network/assets/", assets);
export {
  CHAIN_IDS,
  assets2 as assets,
  src_default as default,
  getAssetEth,
  getAssetFuel,
  getAssetNetwork,
  getAssetWithNetwork,
  getDefaultChainId,
  resolveIconPath
};
//# sourceMappingURL=index.mjs.map