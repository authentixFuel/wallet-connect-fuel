{"version":3,"sources":["../src/script.ts","../src/script-invocation-scope.ts","../src/scripts.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Interface } from '@fuel-ts/abi-coder';\nimport type { InputValue, JsonAbi } from '@fuel-ts/abi-coder';\nimport type { Account, Provider } from '@fuel-ts/account';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { AbstractScript } from '@fuel-ts/interfaces';\nimport type { BytesLike } from '@fuel-ts/interfaces';\nimport type { BN } from '@fuel-ts/math';\nimport type { ScriptRequest } from '@fuel-ts/program';\nimport { arrayify } from '@fuel-ts/utils';\n\nimport { ScriptInvocationScope } from './script-invocation-scope';\n\n/**\n * Represents the result of a script execution.\n */\ntype Result<T> = {\n  value: T | BN | undefined;\n  logs: unknown[];\n};\n\n/**\n * Represents a function that can be invoked within a script.\n */\ntype InvokeMain<TArgs extends Array<any> = Array<any>, TReturn = any> = (\n  ...args: TArgs\n) => ScriptInvocationScope<TArgs, TReturn>;\n\n/**\n * `Script` provides a typed interface for interacting with the script program type.\n */\nexport class Script<TInput extends Array<any>, TOutput> extends AbstractScript {\n  /**\n   * The compiled bytecode of the script.\n   */\n  bytes: Uint8Array;\n\n  /**\n   * The ABI interface for the script.\n   */\n  interface: Interface;\n\n  /**\n   * The account associated with the script.\n   */\n  account: Account;\n\n  /**\n   * The script request object.\n   */\n  script!: ScriptRequest<InputValue<void>[], Result<TOutput>>;\n\n  /**\n   * The provider used for interacting with the network.\n   */\n  provider: Provider;\n\n  /**\n   * Functions that can be invoked within the script.\n   */\n  functions: { main: InvokeMain<TInput, TOutput> };\n\n  /**\n   * Create a new instance of the Script class.\n   *\n   * @param bytecode - The compiled bytecode of the script.\n   * @param abi - The ABI interface for the script.\n   * @param account - The account associated with the script.\n   */\n  constructor(bytecode: BytesLike, abi: JsonAbi, account: Account) {\n    super();\n    this.bytes = arrayify(bytecode);\n    this.interface = new Interface(abi);\n\n    this.provider = account.provider;\n    this.account = account;\n\n    this.functions = {\n      main: (...args: TInput) =>\n        new ScriptInvocationScope(this, this.interface.getFunction('main'), args),\n    };\n  }\n\n  /**\n   * Set the configurable constants of the script.\n   *\n   * @param configurables - An object containing the configurable constants and their values.\n   * @throws Will throw an error if the script has no configurable constants to be set or if an invalid constant is provided.\n   * @returns This instance of the `Script`.\n   */\n  setConfigurableConstants(configurables: { [name: string]: unknown }) {\n    try {\n      if (!Object.keys(this.interface.configurables).length) {\n        throw new Error(`The script does not have configurable constants to be set`);\n      }\n\n      Object.entries(configurables).forEach(([key, value]) => {\n        if (!this.interface.configurables[key]) {\n          throw new Error(`The script does not have a configurable constant named: '${key}'`);\n        }\n\n        const { offset } = this.interface.configurables[key];\n\n        const encoded = this.interface.encodeConfigurable(key, value as InputValue);\n\n        this.bytes.set(encoded, offset);\n      });\n    } catch (err) {\n      throw new FuelError(\n        ErrorCode.INVALID_CONFIGURABLE_CONSTANTS,\n        `Error setting configurable constants: ${(<Error>err).message}.`\n      );\n    }\n\n    return this;\n  }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport type { Provider } from '@fuel-ts/account';\nimport { FuelError } from '@fuel-ts/errors';\nimport type { AbstractScript } from '@fuel-ts/interfaces';\nimport { ScriptRequest, FunctionInvocationScope } from '@fuel-ts/program';\nimport { ByteArrayCoder } from '@fuel-ts/transactions';\n\nexport class ScriptInvocationScope<\n  TArgs extends Array<any> = Array<any>,\n  TReturn = any,\n> extends FunctionInvocationScope<TArgs, TReturn> {\n  scriptRequest!: ScriptRequest<TArgs, TReturn>;\n\n  protected updateScriptRequest() {\n    if (!this.scriptRequest) {\n      this.buildScriptRequest();\n    }\n\n    this.transactionRequest.setScript(this.scriptRequest, this.args);\n  }\n\n  private buildScriptRequest() {\n    const programBytes = (this.program as AbstractScript).bytes;\n    const chainInfoCache = (this.program.provider as Provider).getChain();\n\n    if (!chainInfoCache) {\n      throw new FuelError(\n        FuelError.CODES.CHAIN_INFO_CACHE_EMPTY,\n        'Provider chain info cache is empty. Please make sure to initialize the `Provider` properly by running `await Provider.create()`'\n      );\n    }\n\n    const maxInputs = chainInfoCache.consensusParameters.maxInputs.toNumber();\n\n    const byteLength = new ByteArrayCoder(programBytes.length).encodedLength;\n    this.scriptRequest = new ScriptRequest(\n      programBytes,\n      (args: TArgs) =>\n        this.func.encodeArguments(\n          args,\n          ScriptRequest.getScriptDataOffsetWithScriptBytes(byteLength, maxInputs)\n        ),\n      () => [] as unknown as TReturn\n    );\n  }\n}\n","import { ScriptRequest } from '@fuel-ts/program';\n\n/**\n * @hidden\n *\n * A script that just returns zero\n *\n * Accepts nothing\n * Returns nothing\n *\n * Used for coin transfer transactions\n */\nexport const returnZeroScript = new ScriptRequest(\n  /*\n    Opcode::RET(REG_ZERO)\n    Opcode::NOOP\n  */\n  // TODO: Don't use hardcoded scripts: https://github.com/FuelLabs/fuels-ts/issues/281\n  '0x24000000',\n  () => new Uint8Array(0),\n  () => undefined\n);\n"],"mappings":";AACA,SAAS,iBAAiB;AAG1B,SAAS,WAAW,aAAAA,kBAAiB;AACrC,SAAS,sBAAsB;AAI/B,SAAS,gBAAgB;;;ACPzB,SAAS,iBAAiB;AAE1B,SAAS,eAAe,+BAA+B;AACvD,SAAS,sBAAsB;AAExB,IAAM,wBAAN,cAGG,wBAAwC;AAAA,EAChD;AAAA,EAEU,sBAAsB;AAC9B,QAAI,CAAC,KAAK,eAAe;AACvB,WAAK,mBAAmB;AAAA,IAC1B;AAEA,SAAK,mBAAmB,UAAU,KAAK,eAAe,KAAK,IAAI;AAAA,EACjE;AAAA,EAEQ,qBAAqB;AAC3B,UAAM,eAAgB,KAAK,QAA2B;AACtD,UAAM,iBAAkB,KAAK,QAAQ,SAAsB,SAAS;AAEpE,QAAI,CAAC,gBAAgB;AACnB,YAAM,IAAI;AAAA,QACR,UAAU,MAAM;AAAA,QAChB;AAAA,MACF;AAAA,IACF;AAEA,UAAM,YAAY,eAAe,oBAAoB,UAAU,SAAS;AAExE,UAAM,aAAa,IAAI,eAAe,aAAa,MAAM,EAAE;AAC3D,SAAK,gBAAgB,IAAI;AAAA,MACvB;AAAA,MACA,CAAC,SACC,KAAK,KAAK;AAAA,QACR;AAAA,QACA,cAAc,mCAAmC,YAAY,SAAS;AAAA,MACxE;AAAA,MACF,MAAM,CAAC;AAAA,IACT;AAAA,EACF;AACF;;;ADdO,IAAM,SAAN,cAAyD,eAAe;AAAA;AAAA;AAAA;AAAA,EAI7E;AAAA;AAAA;AAAA;AAAA,EAKA;AAAA;AAAA;AAAA;AAAA,EAKA;AAAA;AAAA;AAAA;AAAA,EAKA;AAAA;AAAA;AAAA;AAAA,EAKA;AAAA;AAAA;AAAA;AAAA,EAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,YAAY,UAAqB,KAAc,SAAkB;AAC/D,UAAM;AACN,SAAK,QAAQ,SAAS,QAAQ;AAC9B,SAAK,YAAY,IAAI,UAAU,GAAG;AAElC,SAAK,WAAW,QAAQ;AACxB,SAAK,UAAU;AAEf,SAAK,YAAY;AAAA,MACf,MAAM,IAAI,SACR,IAAI,sBAAsB,MAAM,KAAK,UAAU,YAAY,MAAM,GAAG,IAAI;AAAA,IAC5E;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,yBAAyB,eAA4C;AACnE,QAAI;AACF,UAAI,CAAC,OAAO,KAAK,KAAK,UAAU,aAAa,EAAE,QAAQ;AACrD,cAAM,IAAI,MAAM,2DAA2D;AAAA,MAC7E;AAEA,aAAO,QAAQ,aAAa,EAAE,QAAQ,CAAC,CAAC,KAAK,KAAK,MAAM;AACtD,YAAI,CAAC,KAAK,UAAU,cAAc,GAAG,GAAG;AACtC,gBAAM,IAAI,MAAM,4DAA4D,MAAM;AAAA,QACpF;AAEA,cAAM,EAAE,OAAO,IAAI,KAAK,UAAU,cAAc,GAAG;AAEnD,cAAM,UAAU,KAAK,UAAU,mBAAmB,KAAK,KAAmB;AAE1E,aAAK,MAAM,IAAI,SAAS,MAAM;AAAA,MAChC,CAAC;AAAA,IACH,SAAS,KAAP;AACA,YAAM,IAAIC;AAAA,QACR,UAAU;AAAA,QACV,yCAAiD,IAAK;AAAA,MACxD;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AACF;;;AEpHA,SAAS,iBAAAC,sBAAqB;AAYvB,IAAM,mBAAmB,IAAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMlC;AAAA,EACA,MAAM,IAAI,WAAW,CAAC;AAAA,EACtB,MAAM;AACR;","names":["FuelError","FuelError","ScriptRequest"]}