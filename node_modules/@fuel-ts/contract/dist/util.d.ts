import type { BytesLike } from '@fuel-ts/interfaces';
import type { StorageSlot } from '@fuel-ts/transactions';
/**
 * @hidden
 *
 * Get the Merkle root of a contract's bytecode.
 *
 * @param bytecode - The bytecode of the contract.
 * @returns The Merkle root of the contract's bytecode.
 */
export declare const getContractRoot: (bytecode: BytesLike) => string;
/**
 * @hidden
 *
 * Get the Merkle root of a contract's storage slots.
 *
 * @param storageSlots - An array of storage slots containing key-value pairs.
 * @returns The Merkle root of the contract's storage slots.
 */
export declare const getContractStorageRoot: (storageSlots: StorageSlot[]) => string;
/**
 * @hidden
 *
 * Get the contract ID of a contract based on its bytecode, salt,
 * and state root.
 *
 * @param bytecode - The bytecode of the contract.
 * @param salt - The salt value used for contract creation.
 * @param stateRoot - The state root of the contract.
 * @returns The contract ID of the contract.
 */
export declare const getContractId: (bytecode: BytesLike, salt: BytesLike, stateRoot: BytesLike) => string;
/**
 * @hidden
 *
 * Ensures that a string is hexlified.
 *
 * @param value - The value to be hexlified.
 * @param isKnownHex - Required if using hex values that need to be converted
 * @returns The input value hexlified with prefix.
 */
export declare const hexlifyWithPrefix: (value: string, isKnownHex?: boolean) => string;
//# sourceMappingURL=util.d.ts.map