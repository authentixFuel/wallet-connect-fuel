import { Interface } from '@fuel-ts/abi-coder';
import type { JsonAbi } from '@fuel-ts/abi-coder';
import { CreateTransactionRequest } from '@fuel-ts/account';
import type { Account, CreateTransactionRequestLike, Provider } from '@fuel-ts/account';
import type { BytesLike } from '@fuel-ts/interfaces';
import { Contract } from '@fuel-ts/program';
import type { StorageSlot } from '@fuel-ts/transactions';
/**
 * Options for deploying a contract.
 */
export type DeployContractOptions = {
    salt?: BytesLike;
    storageSlots?: StorageSlot[];
    stateRoot?: BytesLike;
    configurableConstants?: {
        [name: string]: unknown;
    };
} & CreateTransactionRequestLike;
/**
 * `ContractFactory` provides utilities for deploying and configuring contracts.
 */
export default class ContractFactory {
    bytecode: BytesLike;
    interface: Interface;
    provider: Provider | null;
    account: Account | null;
    /**
     * Create a ContractFactory instance.
     *
     * @param bytecode - The bytecode of the contract.
     * @param abi - The contract's ABI (Application Binary Interface).
     * @param accountOrProvider - An account or provider to be associated with the factory.
     */
    constructor(bytecode: BytesLike, abi: JsonAbi | Interface, accountOrProvider?: Account | Provider | null);
    /**
     * Connect the factory to a provider.
     *
     * @param provider - The provider to be associated with the factory.
     * @returns A new ContractFactory instance.
     */
    connect(provider: Provider): ContractFactory;
    /**
     * Create a transaction request to deploy a contract with the specified options.
     *
     * @param deployContractOptions - Options for deploying the contract.
     * @returns The CreateTransactionRequest object for deploying the contract.
     */
    createTransactionRequest(deployContractOptions?: DeployContractOptions): {
        contractId: string;
        transactionRequest: CreateTransactionRequest;
    };
    /**
     * Deploy a contract with the specified options.
     *
     * @param deployContractOptions - Options for deploying the contract.
     * @returns A promise that resolves to the deployed contract instance.
     */
    deployContract(deployContractOptions?: DeployContractOptions): Promise<Contract>;
    /**
     * Set configurable constants of the contract with the specified values.
     *
     * @param configurableConstants - An object containing configurable names and their values.
     */
    setConfigurableConstants(configurableConstants: {
        [name: string]: unknown;
    }): void;
}
//# sourceMappingURL=contract-factory.d.ts.map