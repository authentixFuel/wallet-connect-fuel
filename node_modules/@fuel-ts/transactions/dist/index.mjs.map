{"version":3,"sources":["../src/coders/input.ts","../src/coders/byte-array.ts","../src/coders/tx-pointer.ts","../src/coders/output.ts","../src/coders/policy.ts","../src/coders/receipt.ts","../src/coders/storage-slot.ts","../src/coders/transaction.ts","../src/coders/witness.ts","../src/coders/utxo-id.ts"],"sourcesContent":["/* eslint-disable max-classes-per-file */\nimport { Coder, B256Coder, NumberCoder, BigNumberCoder } from '@fuel-ts/abi-coder';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { sha256 } from '@fuel-ts/hasher';\nimport type { BytesLike } from '@fuel-ts/interfaces';\nimport type { BN } from '@fuel-ts/math';\nimport { concat, arrayify } from '@fuel-ts/utils';\n\nimport { ByteArrayCoder } from './byte-array';\nimport type { TxPointer } from './tx-pointer';\nimport { TxPointerCoder } from './tx-pointer';\n\nexport enum InputType {\n  Coin = 0,\n  Contract = 1,\n  Message = 2,\n}\n\nexport type InputCoin = {\n  type: InputType.Coin;\n\n  /** Hash of transaction (b256) */\n  txID: string;\n\n  /** Index of transaction output (u8) */\n  outputIndex: number;\n\n  /** Owning address or script hash (b256) */\n  owner: string;\n\n  /** Amount of coins (u64) */\n  amount: BN;\n\n  /** Asset ID of the coins (b256) */\n  assetId: string;\n\n  /** Points to the TX whose output is being spent. (TxPointer) */\n  txPointer: TxPointer;\n\n  /** Index of witness that authorizes spending the coin (u8) */\n  witnessIndex: number;\n\n  /** UTXO being spent must have been created at least this many blocks ago (u32) */\n  maturity: number;\n\n  /** Gas used by predicate (u64) */\n  predicateGasUsed: BN;\n\n  /** Length of predicate, in instructions (u16) */\n  predicateLength: number;\n\n  /** Length of predicate input data, in bytes (u16) */\n  predicateDataLength: number;\n\n  /** Predicate bytecode (byte[]) */\n  predicate: string;\n\n  /** Predicate input data (parameters) (byte[]) */\n  predicateData: string;\n};\n\nexport class InputCoinCoder extends Coder<InputCoin, InputCoin> {\n  constructor() {\n    super('InputCoin', 'struct InputCoin', 0);\n  }\n\n  encode(value: InputCoin): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new B256Coder().encode(value.txID));\n    parts.push(new NumberCoder('u8').encode(value.outputIndex));\n    parts.push(new B256Coder().encode(value.owner));\n    parts.push(new BigNumberCoder('u64').encode(value.amount));\n    parts.push(new B256Coder().encode(value.assetId));\n    parts.push(new TxPointerCoder().encode(value.txPointer));\n    parts.push(new NumberCoder('u8').encode(value.witnessIndex));\n    parts.push(new NumberCoder('u32').encode(value.maturity));\n    parts.push(new BigNumberCoder('u64').encode(value.predicateGasUsed));\n    parts.push(new NumberCoder('u32').encode(value.predicateLength));\n    parts.push(new NumberCoder('u32').encode(value.predicateDataLength));\n    parts.push(new ByteArrayCoder(value.predicateLength).encode(value.predicate));\n    parts.push(new ByteArrayCoder(value.predicateDataLength).encode(value.predicateData));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [InputCoin, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new B256Coder().decode(data, o);\n    const txID = decoded;\n    [decoded, o] = new NumberCoder('u8').decode(data, o);\n    const outputIndex = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const owner = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const amount = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const assetId = decoded;\n    [decoded, o] = new TxPointerCoder().decode(data, o);\n    const txPointer = decoded;\n    [decoded, o] = new NumberCoder('u8').decode(data, o);\n    const witnessIndex = Number(decoded);\n    [decoded, o] = new NumberCoder('u32').decode(data, o);\n    const maturity = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const predicateGasUsed = decoded;\n    [decoded, o] = new NumberCoder('u32').decode(data, o);\n    const predicateLength = decoded;\n    [decoded, o] = new NumberCoder('u32').decode(data, o);\n    const predicateDataLength = decoded;\n    [decoded, o] = new ByteArrayCoder(predicateLength).decode(data, o);\n    const predicate = decoded;\n    [decoded, o] = new ByteArrayCoder(predicateDataLength).decode(data, o);\n    const predicateData = decoded;\n\n    return [\n      {\n        type: InputType.Coin,\n        txID,\n        outputIndex,\n        owner,\n        amount,\n        assetId,\n        txPointer,\n        witnessIndex,\n        maturity,\n        predicateGasUsed,\n        predicateLength,\n        predicateDataLength,\n        predicate,\n        predicateData,\n      },\n      o,\n    ];\n  }\n}\n\nexport type InputContract = {\n  type: InputType.Contract;\n\n  /** Hash of transaction (b256) */\n  txID: string;\n\n  /** Index of transaction output (u8) */\n  outputIndex: number;\n\n  /** Root of amount of coins owned by contract before transaction execution (b256) */\n  balanceRoot: string;\n\n  /** State root of contract before transaction execution (b256) */\n  stateRoot: string;\n\n  /** Points to the TX whose output is being spent. (TxPointer) */\n  txPointer: TxPointer;\n\n  /** Contract ID (b256) */\n  contractID: string;\n};\n\nexport class InputContractCoder extends Coder<InputContract, InputContract> {\n  constructor() {\n    super('InputContract', 'struct InputContract', 0);\n  }\n\n  encode(value: InputContract): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new B256Coder().encode(value.txID));\n    parts.push(new NumberCoder('u8').encode(value.outputIndex));\n    parts.push(new B256Coder().encode(value.balanceRoot));\n    parts.push(new B256Coder().encode(value.stateRoot));\n    parts.push(new TxPointerCoder().encode(value.txPointer));\n    parts.push(new B256Coder().encode(value.contractID));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [InputContract, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new B256Coder().decode(data, o);\n    const txID = decoded;\n    [decoded, o] = new NumberCoder('u8').decode(data, o);\n    const outputIndex = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const balanceRoot = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const stateRoot = decoded;\n    [decoded, o] = new TxPointerCoder().decode(data, o);\n    const txPointer = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const contractID = decoded;\n\n    return [\n      {\n        type: InputType.Contract,\n        txID,\n        outputIndex,\n        balanceRoot,\n        stateRoot,\n        txPointer,\n        contractID,\n      },\n      o,\n    ];\n  }\n}\n\nexport type InputMessage = {\n  type: InputType.Message;\n\n  /** Address of sender */\n  sender: string;\n\n  /** Address of recipient */\n  recipient: string;\n\n  /** Amount of coins */\n  amount: BN;\n\n  /** data of message */\n  data?: string;\n\n  /** Length of predicate, in instructions (u16) */\n  dataLength?: number;\n\n  /** Unique nonce of message */\n  nonce: string;\n\n  /** Index of witness that authorizes message (u8) */\n  witnessIndex: number;\n\n  /** Gas used by predicate (u64) */\n  predicateGasUsed: BN;\n\n  /** Length of predicate, in instructions (u16) */\n  predicateLength: number;\n\n  /** Length of predicate input data, in bytes (u16) */\n  predicateDataLength: number;\n\n  /** Predicate bytecode (byte[]) */\n  predicate: string;\n\n  /** Predicate input data (parameters) (byte[]) */\n  predicateData: string;\n};\n\nexport class InputMessageCoder extends Coder<InputMessage, InputMessage> {\n  constructor() {\n    super('InputMessage', 'struct InputMessage', 0);\n  }\n\n  static getMessageId(\n    value: Pick<InputMessage, 'sender' | 'recipient' | 'nonce' | 'amount' | 'data'>\n  ): string {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new ByteArrayCoder(32).encode(value.sender));\n    parts.push(new ByteArrayCoder(32).encode(value.recipient));\n    parts.push(new ByteArrayCoder(32).encode(value.nonce));\n    parts.push(new BigNumberCoder('u64').encode(value.amount));\n    parts.push(arrayify(value.data || '0x'));\n\n    return sha256(concat(parts));\n  }\n\n  static encodeData(messageData?: BytesLike): Uint8Array {\n    const bytes = arrayify(messageData || '0x');\n    const dataLength = bytes.length;\n    return new ByteArrayCoder(dataLength).encode(bytes);\n  }\n\n  encode(value: InputMessage): Uint8Array {\n    const parts: Uint8Array[] = [];\n    const data = InputMessageCoder.encodeData(value.data);\n\n    parts.push(new ByteArrayCoder(32).encode(value.sender));\n    parts.push(new ByteArrayCoder(32).encode(value.recipient));\n    parts.push(new BigNumberCoder('u64').encode(value.amount));\n    parts.push(new ByteArrayCoder(32).encode(value.nonce));\n    parts.push(new NumberCoder('u8').encode(value.witnessIndex));\n    parts.push(new BigNumberCoder('u64').encode(value.predicateGasUsed));\n    parts.push(new NumberCoder('u32').encode(data.length));\n    parts.push(new NumberCoder('u32').encode(value.predicateLength));\n    parts.push(new NumberCoder('u32').encode(value.predicateDataLength));\n    parts.push(new ByteArrayCoder(data.length).encode(data));\n    parts.push(new ByteArrayCoder(value.predicateLength).encode(value.predicate));\n    parts.push(new ByteArrayCoder(value.predicateDataLength).encode(value.predicateData));\n\n    return concat(parts);\n  }\n\n  static decodeData(messageData: BytesLike): Uint8Array {\n    const bytes = arrayify(messageData);\n    const dataLength = bytes.length;\n    const [data] = new ByteArrayCoder(dataLength).decode(bytes, 0);\n\n    return arrayify(data);\n  }\n\n  decode(data: Uint8Array, offset: number): [InputMessage, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new B256Coder().decode(data, o);\n    const sender = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const recipient = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const amount = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const nonce = decoded;\n    [decoded, o] = new NumberCoder('u8').decode(data, o);\n    const witnessIndex = Number(decoded);\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const predicateGasUsed = decoded;\n    [decoded, o] = new NumberCoder('u32').decode(data, o);\n    const dataLength = decoded;\n    [decoded, o] = new NumberCoder('u32').decode(data, o);\n    const predicateLength = decoded;\n    [decoded, o] = new NumberCoder('u32').decode(data, o);\n    const predicateDataLength = decoded;\n    [decoded, o] = new ByteArrayCoder(dataLength).decode(data, o);\n    const messageData = decoded;\n    [decoded, o] = new ByteArrayCoder(predicateLength).decode(data, o);\n    const predicate = decoded;\n    [decoded, o] = new ByteArrayCoder(predicateDataLength).decode(data, o);\n    const predicateData = decoded;\n\n    return [\n      {\n        type: InputType.Message,\n        sender,\n        recipient,\n        amount,\n        witnessIndex,\n        nonce,\n        predicateGasUsed,\n        dataLength,\n        predicateLength,\n        predicateDataLength,\n        data: messageData,\n        predicate,\n        predicateData,\n      },\n      o,\n    ];\n  }\n}\n\nexport type Input = InputCoin | InputContract | InputMessage;\n\nexport class InputCoder extends Coder<Input, Input> {\n  constructor() {\n    super('Input', 'struct Input', 0);\n  }\n\n  encode(value: Input): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new NumberCoder('u8').encode(value.type));\n\n    const { type } = value;\n\n    switch (type) {\n      case InputType.Coin: {\n        parts.push(new InputCoinCoder().encode(value));\n        break;\n      }\n      case InputType.Contract: {\n        parts.push(new InputContractCoder().encode(value));\n        break;\n      }\n      case InputType.Message: {\n        parts.push(new InputMessageCoder().encode(value));\n        break;\n      }\n      default: {\n        throw new FuelError(\n          ErrorCode.INVALID_TRANSACTION_INPUT,\n          `Invalid transaction input type: ${type}.`\n        );\n      }\n    }\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [Input, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new NumberCoder('u8').decode(data, o);\n    const type = decoded as InputType;\n    switch (type) {\n      case InputType.Coin: {\n        [decoded, o] = new InputCoinCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case InputType.Contract: {\n        [decoded, o] = new InputContractCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case InputType.Message: {\n        [decoded, o] = new InputMessageCoder().decode(data, o);\n        return [decoded, o];\n      }\n      default: {\n        throw new FuelError(\n          ErrorCode.INVALID_TRANSACTION_INPUT,\n          `Invalid transaction input type: ${type}.`\n        );\n      }\n    }\n  }\n}\n","import { Coder } from '@fuel-ts/abi-coder';\nimport type { BytesLike } from '@fuel-ts/interfaces';\nimport { concat, hexlify, arrayify } from '@fuel-ts/utils';\n\nexport class ByteArrayCoder extends Coder<BytesLike, string> {\n  length: number;\n  #paddingLength: number;\n\n  constructor(length: number) {\n    const paddingLength = (8 - (length % 8)) % 8;\n    const encodedLength = length + paddingLength;\n    super(\n      'ByteArray',\n      // While this might sound like a [u8; N] coder it's actually not.\n      // A [u8; N] coder would pad every u8 to 8 bytes which would\n      // make every u8 have the same size as a u64.\n      // We are packing four u8s into u64s here, avoiding this padding.\n      `[u64; ${encodedLength / 4}]`,\n      encodedLength\n    );\n    this.length = length;\n    this.#paddingLength = paddingLength;\n  }\n\n  encode(value: BytesLike): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    const data = arrayify(value);\n    parts.push(data);\n    // Write padding\n    if (this.#paddingLength) {\n      parts.push(new Uint8Array(this.#paddingLength));\n    }\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [string, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = [hexlify(data.slice(o, o + this.length)), o + this.length];\n    const value = decoded;\n    // Read padding\n    if (this.#paddingLength) {\n      [decoded, o] = [null, o + this.#paddingLength];\n    }\n\n    return [value, o];\n  }\n}\n","import { NumberCoder, StructCoder } from '@fuel-ts/abi-coder';\n\nexport type TxPointer = {\n  /** Block height (u32) */\n  blockHeight: number;\n\n  /** Transaction index (u16) */\n  txIndex: number;\n};\n\nexport class TxPointerCoder extends StructCoder<{\n  blockHeight: NumberCoder;\n  txIndex: NumberCoder;\n}> {\n  constructor() {\n    super('TxPointer', {\n      blockHeight: new NumberCoder('u32'),\n      txIndex: new NumberCoder('u16'),\n    });\n  }\n}\n","/* eslint-disable max-classes-per-file */\nimport { Coder, B256Coder, NumberCoder, BigNumberCoder } from '@fuel-ts/abi-coder';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport type { BN } from '@fuel-ts/math';\nimport { concat } from '@fuel-ts/utils';\n\nexport enum OutputType /* u8 */ {\n  Coin = 0,\n  Contract = 1,\n  Change = 2,\n  Variable = 3,\n  ContractCreated = 4,\n}\n\nexport type OutputCoin = {\n  type: OutputType.Coin;\n  /** Receiving address or script hash (b256) */\n  to: string;\n  /** Amount of coins to send (u64) */\n  amount: BN;\n  /** Asset ID of coins (b256) */\n  assetId: string;\n};\n\nexport class OutputCoinCoder extends Coder<OutputCoin, OutputCoin> {\n  constructor() {\n    super('OutputCoin', 'struct OutputCoin', 0);\n  }\n\n  encode(value: OutputCoin): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new B256Coder().encode(value.to));\n    parts.push(new BigNumberCoder('u64').encode(value.amount));\n    parts.push(new B256Coder().encode(value.assetId));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [OutputCoin, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new B256Coder().decode(data, o);\n    const to = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const amount = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const assetId = decoded;\n\n    return [\n      {\n        type: OutputType.Coin,\n        to,\n        amount,\n        assetId,\n      },\n      o,\n    ];\n  }\n}\n\nexport type OutputContract = {\n  type: OutputType.Contract;\n  /** Index of input contract (u8) */\n  inputIndex: number;\n  /** Root of amount of coins owned by contract after transaction execution (b256) */\n  balanceRoot: string;\n  /** State root of contract after transaction execution (b256) */\n  stateRoot: string;\n};\n\nexport class OutputContractCoder extends Coder<OutputContract, OutputContract> {\n  constructor() {\n    super('OutputContract', 'struct OutputContract', 0);\n  }\n\n  encode(value: OutputContract): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new NumberCoder('u8').encode(value.inputIndex));\n    parts.push(new B256Coder().encode(value.balanceRoot));\n    parts.push(new B256Coder().encode(value.stateRoot));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [OutputContract, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new NumberCoder('u8').decode(data, o);\n    const inputIndex = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const balanceRoot = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const stateRoot = decoded;\n\n    return [\n      {\n        type: OutputType.Contract,\n        inputIndex,\n        balanceRoot,\n        stateRoot,\n      },\n      o,\n    ];\n  }\n}\n\nexport type OutputChange = {\n  type: OutputType.Change;\n  /** Receiving address or script hash (b256) */\n  to: string;\n  /** Amount of coins to send (u64) */\n  amount: BN;\n  /** Asset ID of coins (b256) */\n  assetId: string;\n};\n\nexport class OutputChangeCoder extends Coder<OutputChange, OutputChange> {\n  constructor() {\n    super('OutputChange', 'struct OutputChange', 0);\n  }\n\n  encode(value: OutputChange): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new B256Coder().encode(value.to));\n    parts.push(new BigNumberCoder('u64').encode(value.amount));\n    parts.push(new B256Coder().encode(value.assetId));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [OutputChange, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new B256Coder().decode(data, o);\n    const to = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const amount = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const assetId = decoded;\n\n    return [\n      {\n        type: OutputType.Change,\n        to,\n        amount,\n        assetId,\n      },\n      o,\n    ];\n  }\n}\n\nexport type OutputVariable = {\n  type: OutputType.Variable;\n  /** Receiving address or script hash (b256) */\n  to: string;\n  /** Amount of coins to send (u64) */\n  amount: BN;\n  /** Asset ID of coins (b256) */\n  assetId: string;\n};\n\nexport class OutputVariableCoder extends Coder<OutputVariable, OutputVariable> {\n  constructor() {\n    super('OutputVariable', 'struct OutputVariable', 0);\n  }\n\n  encode(value: OutputVariable): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new B256Coder().encode(value.to));\n    parts.push(new BigNumberCoder('u64').encode(value.amount));\n    parts.push(new B256Coder().encode(value.assetId));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [OutputVariable, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new B256Coder().decode(data, o);\n    const to = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const amount = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const assetId = decoded;\n\n    return [\n      {\n        type: OutputType.Variable,\n        to,\n        amount,\n        assetId,\n      },\n      o,\n    ];\n  }\n}\n\nexport type OutputContractCreated = {\n  type: OutputType.ContractCreated;\n  /** Contract ID (b256) */\n  contractId: string;\n  /** State root of contract (b256) */\n  stateRoot: string;\n};\n\nexport class OutputContractCreatedCoder extends Coder<\n  OutputContractCreated,\n  OutputContractCreated\n> {\n  constructor() {\n    super('OutputContractCreated', 'struct OutputContractCreated', 0);\n  }\n\n  encode(value: OutputContractCreated): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new B256Coder().encode(value.contractId));\n    parts.push(new B256Coder().encode(value.stateRoot));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [OutputContractCreated, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new B256Coder().decode(data, o);\n    const contractId = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const stateRoot = decoded;\n\n    return [\n      {\n        type: OutputType.ContractCreated,\n        contractId,\n        stateRoot,\n      },\n      o,\n    ];\n  }\n}\n\nexport type Output =\n  | OutputCoin\n  | OutputContract\n  | OutputChange\n  | OutputVariable\n  | OutputContractCreated;\n\nexport class OutputCoder extends Coder<Output, Output> {\n  constructor() {\n    super('Output', ' struct Output', 0);\n  }\n\n  encode(value: Output): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new NumberCoder('u8').encode(value.type));\n\n    const { type } = value;\n\n    switch (type) {\n      case OutputType.Coin: {\n        parts.push(new OutputCoinCoder().encode(value));\n        break;\n      }\n      case OutputType.Contract: {\n        parts.push(new OutputContractCoder().encode(value));\n        break;\n      }\n      case OutputType.Change: {\n        parts.push(new OutputChangeCoder().encode(value));\n        break;\n      }\n      case OutputType.Variable: {\n        parts.push(new OutputVariableCoder().encode(value));\n        break;\n      }\n      case OutputType.ContractCreated: {\n        parts.push(new OutputContractCreatedCoder().encode(value));\n        break;\n      }\n      default: {\n        throw new FuelError(\n          ErrorCode.INVALID_TRANSACTION_OUTPUT,\n          `Invalid transaction output type: ${type}.`\n        );\n      }\n    }\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [Output, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new NumberCoder('u8').decode(data, o);\n    const type = decoded as OutputType;\n    switch (type) {\n      case OutputType.Coin: {\n        [decoded, o] = new OutputCoinCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case OutputType.Contract: {\n        [decoded, o] = new OutputContractCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case OutputType.Change: {\n        [decoded, o] = new OutputChangeCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case OutputType.Variable: {\n        [decoded, o] = new OutputVariableCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case OutputType.ContractCreated: {\n        [decoded, o] = new OutputContractCreatedCoder().decode(data, o);\n        return [decoded, o];\n      }\n      default: {\n        throw new FuelError(\n          ErrorCode.INVALID_TRANSACTION_OUTPUT,\n          `Invalid transaction output type: ${type}.`\n        );\n      }\n    }\n  }\n}\n","import { BigNumberCoder, Coder, NumberCoder } from '@fuel-ts/abi-coder';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport type { BN } from '@fuel-ts/math';\nimport { concat } from '@fuel-ts/utils';\n\n// Bitfield of used policy types.\nexport enum PolicyType {\n  GasPrice = 1,\n  WitnessLimit = 2,\n  Maturity = 4,\n  MaxFee = 8,\n}\n\nexport type Policy = PolicyGasPrice | PolicyWitnessLimit | PolicyMaturity | PolicyMaxFee;\n\nexport type PolicyGasPrice = {\n  type: PolicyType.GasPrice;\n  data: BN;\n};\n\nexport type PolicyWitnessLimit = {\n  type: PolicyType.WitnessLimit;\n  data: BN;\n};\n\nexport type PolicyMaturity = {\n  type: PolicyType.Maturity;\n  data: number;\n};\n\nexport type PolicyMaxFee = {\n  type: PolicyType.MaxFee;\n  data: BN;\n};\n\nexport const sortPolicies = (policies: Policy[]): Policy[] =>\n  policies.sort((a, b) => a.type - b.type);\n\nfunction validateDuplicatedPolicies(policies: Policy[]): void {\n  const seenTypes = new Set<PolicyType>();\n\n  policies.forEach((policy) => {\n    if (seenTypes.has(policy.type)) {\n      throw new FuelError(\n        ErrorCode.DUPLICATED_POLICY,\n        `Duplicate policy type found: ${PolicyType.MaxFee}`\n      );\n    }\n    seenTypes.add(policy.type);\n  });\n}\n\nexport class PoliciesCoder extends Coder<Policy[], Policy[]> {\n  constructor() {\n    super('Policies', 'array Policy', 0);\n  }\n\n  encode(policies: Policy[]): Uint8Array {\n    validateDuplicatedPolicies(policies);\n    const sortedPolicies = sortPolicies(policies);\n\n    const parts: Uint8Array[] = [];\n\n    sortedPolicies.forEach(({ data, type }) => {\n      switch (type) {\n        case PolicyType.MaxFee:\n        case PolicyType.GasPrice:\n        case PolicyType.WitnessLimit:\n          parts.push(new BigNumberCoder('u64').encode(data));\n          break;\n\n        case PolicyType.Maturity:\n          parts.push(new NumberCoder('u32').encode(data));\n          break;\n\n        default: {\n          throw new FuelError(ErrorCode.INVALID_POLICY_TYPE, `Invalid policy type: ${type}`);\n        }\n      }\n    });\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number, policyTypes: number): [Policy[], number] {\n    let o = offset;\n    const policies: Policy[] = [];\n\n    if (policyTypes & PolicyType.GasPrice) {\n      const [gasPrice, nextOffset] = new BigNumberCoder('u64').decode(data, o);\n      o = nextOffset;\n      policies.push({ type: PolicyType.GasPrice, data: gasPrice });\n    }\n\n    if (policyTypes & PolicyType.WitnessLimit) {\n      const [witnessLimit, nextOffset] = new BigNumberCoder('u64').decode(data, o);\n      o = nextOffset;\n      policies.push({ type: PolicyType.WitnessLimit, data: witnessLimit });\n    }\n\n    if (policyTypes & PolicyType.Maturity) {\n      const [maturity, nextOffset] = new NumberCoder('u32').decode(data, o);\n      o = nextOffset;\n      policies.push({ type: PolicyType.Maturity, data: maturity });\n    }\n\n    if (policyTypes & PolicyType.MaxFee) {\n      const [maxFee, nextOffset] = new BigNumberCoder('u64').decode(data, o);\n      o = nextOffset;\n      policies.push({ type: PolicyType.MaxFee, data: maxFee });\n    }\n\n    return [policies, o];\n  }\n}\n","/* eslint-disable max-classes-per-file */\nimport { Coder, BigNumberCoder, B256Coder, NumberCoder } from '@fuel-ts/abi-coder';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { sha256 } from '@fuel-ts/hasher';\nimport type { BN } from '@fuel-ts/math';\nimport { arrayify, concat } from '@fuel-ts/utils';\n\nimport { ByteArrayCoder } from './byte-array';\n\nexport enum ReceiptType /* u8 */ {\n  Call = 0,\n  Return = 1,\n  ReturnData = 2,\n  Panic = 3,\n  Revert = 4,\n  Log = 5,\n  LogData = 6,\n  Transfer = 7,\n  TransferOut = 8,\n  ScriptResult = 9,\n  MessageOut = 10,\n  Mint = 11,\n  Burn = 12,\n}\n\nexport type ReceiptCall = {\n  type: ReceiptType.Call;\n  /** Contract ID of current context if in an internal context, zero otherwise (b256) */\n  from: string;\n  /** Contract ID of called contract (b256) */\n  to: string;\n  /** Amount of coins to forward, i.e. $rB (u64) */\n  amount: BN;\n  /** Asset ID of coins to forward, i.e. MEM[$rC, 32] (b256) */\n  assetId: string;\n  /** Gas to forward, i.e. $rD (u64) */\n  gas: BN;\n  /** First parameter (u64) */\n  param1: BN;\n  /** Second parameter (u64) */\n  param2: BN;\n  /** Value of register $pc (u64) */\n  pc: BN;\n  /** Value of register $is (u64) */\n  is: BN;\n};\n\nexport class ReceiptCallCoder extends Coder<ReceiptCall, ReceiptCall> {\n  constructor() {\n    super('ReceiptCall', 'struct ReceiptCall', 0);\n  }\n\n  encode(value: ReceiptCall): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new B256Coder().encode(value.from));\n    parts.push(new B256Coder().encode(value.to));\n    parts.push(new BigNumberCoder('u64').encode(value.amount));\n    parts.push(new B256Coder().encode(value.assetId));\n    parts.push(new BigNumberCoder('u64').encode(value.gas));\n    parts.push(new BigNumberCoder('u64').encode(value.param1));\n    parts.push(new BigNumberCoder('u64').encode(value.param2));\n    parts.push(new BigNumberCoder('u64').encode(value.pc));\n    parts.push(new BigNumberCoder('u64').encode(value.is));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [ReceiptCall, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new B256Coder().decode(data, o);\n    const from = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const to = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const amount = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const assetId = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const gas = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const param1 = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const param2 = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const pc = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const is = decoded;\n\n    return [\n      {\n        type: ReceiptType.Call,\n        from,\n        to,\n        amount,\n        assetId,\n        gas,\n        param1,\n        param2,\n        pc,\n        is,\n      },\n      o,\n    ];\n  }\n}\n\nexport type ReceiptReturn = {\n  type: ReceiptType.Return;\n  /** Contract ID of current context if in an internal context, zero otherwise (b256) */\n  id: string;\n  /** Value of register $rA (u64) */\n  val: BN;\n  /** Value of register $pc (u64) */\n  pc: BN;\n  /** Value of register $is (u64) */\n  is: BN;\n};\n\nexport class ReceiptReturnCoder extends Coder<ReceiptReturn, ReceiptReturn> {\n  constructor() {\n    super('ReceiptReturn', 'struct ReceiptReturn', 0);\n  }\n\n  encode(value: ReceiptReturn): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new B256Coder().encode(value.id));\n    parts.push(new BigNumberCoder('u64').encode(value.val));\n    parts.push(new BigNumberCoder('u64').encode(value.pc));\n    parts.push(new BigNumberCoder('u64').encode(value.is));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [ReceiptReturn, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new B256Coder().decode(data, o);\n    const id = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const val = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const pc = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const is = decoded;\n\n    return [\n      {\n        type: ReceiptType.Return,\n        id,\n        val,\n        pc,\n        is,\n      },\n      o,\n    ];\n  }\n}\n\nexport type ReceiptReturnData = {\n  type: ReceiptType.ReturnData;\n  /** Contract ID of current context if in an internal context, zero otherwise (b256) */\n  id: string;\n  /** Value of register $rA (u64) */\n  ptr: BN;\n  /** Value of register $rB (u64) */\n  len: BN;\n  /** Hash of MEM[$rA, $rB] (b256) */\n  digest: string;\n  /** Value of register $pc (u64) */\n  pc: BN;\n  /** Value of register $is (u64) */\n  is: BN;\n};\n\nexport class ReceiptReturnDataCoder extends Coder<ReceiptReturnData, ReceiptReturnData> {\n  constructor() {\n    super('ReceiptReturnData', 'struct ReceiptReturnData', 0);\n  }\n\n  encode(value: ReceiptReturnData): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new B256Coder().encode(value.id));\n    parts.push(new BigNumberCoder('u64').encode(value.ptr));\n    parts.push(new BigNumberCoder('u64').encode(value.len));\n    parts.push(new B256Coder().encode(value.digest));\n    parts.push(new BigNumberCoder('u64').encode(value.pc));\n    parts.push(new BigNumberCoder('u64').encode(value.is));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [ReceiptReturnData, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new B256Coder().decode(data, o);\n    const id = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const ptr = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const len = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const digest = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const pc = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const is = decoded;\n\n    return [\n      {\n        type: ReceiptType.ReturnData,\n        id,\n        ptr,\n        len,\n        digest,\n        pc,\n        is,\n      },\n      o,\n    ];\n  }\n}\n\nexport type ReceiptPanic = {\n  type: ReceiptType.Panic;\n  /** Contract ID of current context if in an internal context, zero otherwise (b256) */\n  id: string;\n  /** Panic reason (u64) */\n  reason: BN;\n  /** Value of register $pc (u64) */\n  pc: BN;\n  /** Value of register $is (u64) */\n  is: BN;\n  /** Value of optional contract ID */\n  contractId: string;\n};\n\nexport class ReceiptPanicCoder extends Coder<ReceiptPanic, ReceiptPanic> {\n  constructor() {\n    super('ReceiptPanic', 'struct ReceiptPanic', 0);\n  }\n\n  encode(value: ReceiptPanic): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new B256Coder().encode(value.id));\n    parts.push(new BigNumberCoder('u64').encode(value.reason));\n    parts.push(new BigNumberCoder('u64').encode(value.pc));\n    parts.push(new BigNumberCoder('u64').encode(value.is));\n    parts.push(new B256Coder().encode(value.contractId));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [ReceiptPanic, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new B256Coder().decode(data, o);\n    const id = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const reason = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const pc = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const is = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const contractId = decoded;\n\n    return [\n      {\n        type: ReceiptType.Panic,\n        id,\n        reason,\n        pc,\n        is,\n        contractId,\n      },\n      o,\n    ];\n  }\n}\n\nexport type ReceiptRevert = {\n  type: ReceiptType.Revert;\n  /** Contract ID of current context if in an internal context, zero otherwise (b256) */\n  id: string;\n  /** Value of register $rA (u64) */\n  val: BN;\n  /** Value of register $pc (u64) */\n  pc: BN;\n  /** Value of register $is (u64) */\n  is: BN;\n};\n\nexport class ReceiptRevertCoder extends Coder<ReceiptRevert, ReceiptRevert> {\n  constructor() {\n    super('ReceiptRevert', 'struct ReceiptRevert', 0);\n  }\n\n  encode(value: ReceiptRevert): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new B256Coder().encode(value.id));\n    parts.push(new BigNumberCoder('u64').encode(value.val));\n    parts.push(new BigNumberCoder('u64').encode(value.pc));\n    parts.push(new BigNumberCoder('u64').encode(value.is));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [ReceiptRevert, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new B256Coder().decode(data, o);\n    const id = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const val = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const pc = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const is = decoded;\n\n    return [\n      {\n        type: ReceiptType.Revert,\n        id,\n        val,\n        pc,\n        is,\n      },\n      o,\n    ];\n  }\n}\n\nexport type ReceiptLog = {\n  type: ReceiptType.Log;\n  /** Contract ID of current context if in an internal context, zero otherwise (b256) */\n  id: string;\n  /** Value of register $rA (u64) */\n  val0: BN;\n  /** Value of register $rB (u64) */\n  val1: BN;\n  /** Value of register $rC (u64) */\n  val2: BN;\n  /** Value of register $rD (u64) */\n  val3: BN;\n  /** Value of register $pc (u64) */\n  pc: BN;\n  /** Value of register $is (u64) */\n  is: BN;\n};\n\nexport class ReceiptLogCoder extends Coder<ReceiptLog, ReceiptLog> {\n  constructor() {\n    super('ReceiptLog', 'struct ReceiptLog', 0);\n  }\n\n  encode(value: ReceiptLog): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new B256Coder().encode(value.id));\n    parts.push(new BigNumberCoder('u64').encode(value.val0));\n    parts.push(new BigNumberCoder('u64').encode(value.val1));\n    parts.push(new BigNumberCoder('u64').encode(value.val2));\n    parts.push(new BigNumberCoder('u64').encode(value.val3));\n    parts.push(new BigNumberCoder('u64').encode(value.pc));\n    parts.push(new BigNumberCoder('u64').encode(value.is));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [ReceiptLog, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new B256Coder().decode(data, o);\n    const id = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const val0 = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const val1 = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const val2 = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const val3 = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const pc = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const is = decoded;\n\n    return [\n      {\n        type: ReceiptType.Log,\n        id,\n        val0,\n        val1,\n        val2,\n        val3,\n        pc,\n        is,\n      },\n      o,\n    ];\n  }\n}\n\nexport type ReceiptLogData = {\n  type: ReceiptType.LogData;\n  /** Contract ID of current context if in an internal context, zero otherwise (b256) */\n  id: string;\n  /** Value of register $rA (u64) */\n  val0: BN;\n  /** Value of register $rB (u64) */\n  val1: BN;\n  /** Value of register $rC (u64) */\n  ptr: BN;\n  /** Value of register $rD (u64) */\n  len: BN;\n  /** Hash of MEM[$rC, $rD] (b256) */\n  digest: string;\n  /** Value of register $pc (u64) */\n  pc: BN;\n  /** Value of register $is (u64) */\n  is: BN;\n};\n\nexport class ReceiptLogDataCoder extends Coder<ReceiptLogData, ReceiptLogData> {\n  constructor() {\n    super('ReceiptLogData', 'struct ReceiptLogData', 0);\n  }\n\n  encode(value: ReceiptLogData): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new B256Coder().encode(value.id));\n    parts.push(new BigNumberCoder('u64').encode(value.val0));\n    parts.push(new BigNumberCoder('u64').encode(value.val1));\n    parts.push(new BigNumberCoder('u64').encode(value.ptr));\n    parts.push(new BigNumberCoder('u64').encode(value.len));\n    parts.push(new B256Coder().encode(value.digest));\n    parts.push(new BigNumberCoder('u64').encode(value.pc));\n    parts.push(new BigNumberCoder('u64').encode(value.is));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [ReceiptLogData, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new B256Coder().decode(data, o);\n    const id = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const val0 = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const val1 = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const ptr = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const len = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const digest = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const pc = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const is = decoded;\n\n    return [\n      {\n        type: ReceiptType.LogData,\n        id,\n        val0,\n        val1,\n        ptr,\n        len,\n        digest,\n        pc,\n        is,\n      },\n      o,\n    ];\n  }\n}\n\nexport type ReceiptTransfer = {\n  type: ReceiptType.Transfer;\n  /** Contract ID of current context if in an internal context, zero otherwise (b256) */\n  from: string;\n  /** Contract ID of contract to transfer coins to (b256) */\n  to: string;\n  /** Amount of coins transferred (u64) */\n  amount: BN;\n  /** Asset ID of coins transferred (b256) */\n  assetId: string;\n  /** Value of register $pc (u64) */\n  pc: BN;\n  /** Value of register $is (u64) */\n  is: BN;\n};\n\nexport class ReceiptTransferCoder extends Coder<ReceiptTransfer, ReceiptTransfer> {\n  constructor() {\n    super('ReceiptTransfer', 'struct ReceiptTransfer', 0);\n  }\n\n  encode(value: ReceiptTransfer): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new B256Coder().encode(value.from));\n    parts.push(new B256Coder().encode(value.to));\n    parts.push(new BigNumberCoder('u64').encode(value.amount));\n    parts.push(new B256Coder().encode(value.assetId));\n    parts.push(new BigNumberCoder('u64').encode(value.pc));\n    parts.push(new BigNumberCoder('u64').encode(value.is));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [ReceiptTransfer, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new B256Coder().decode(data, o);\n    const from = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const to = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const amount = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const assetId = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const pc = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const is = decoded;\n\n    return [\n      {\n        type: ReceiptType.Transfer,\n        from,\n        to,\n        amount,\n        assetId,\n        pc,\n        is,\n      },\n      o,\n    ];\n  }\n}\n\nexport type ReceiptTransferOut = {\n  type: ReceiptType.TransferOut;\n  /** Contract ID of current context if in an internal context, zero otherwise (b256) */\n  from: string;\n  /** Address to transfer coins to (b256) */\n  to: string;\n  /** Amount of coins transferred (u64) */\n  amount: BN;\n  /** Asset ID of coins transferred (b256) */\n  assetId: string;\n  /** Value of register $pc (u64) */\n  pc: BN;\n  /** Value of register $is (u64) */\n  is: BN;\n};\n\nexport class ReceiptTransferOutCoder extends Coder<ReceiptTransferOut, ReceiptTransferOut> {\n  constructor() {\n    super('ReceiptTransferOut', 'struct ReceiptTransferOut', 0);\n  }\n\n  encode(value: ReceiptTransferOut): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new B256Coder().encode(value.from));\n    parts.push(new B256Coder().encode(value.to));\n    parts.push(new BigNumberCoder('u64').encode(value.amount));\n    parts.push(new B256Coder().encode(value.assetId));\n    parts.push(new BigNumberCoder('u64').encode(value.pc));\n    parts.push(new BigNumberCoder('u64').encode(value.is));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [ReceiptTransferOut, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new B256Coder().decode(data, o);\n    const from = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const to = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const amount = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const assetId = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const pc = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const is = decoded;\n\n    return [\n      {\n        type: ReceiptType.TransferOut,\n        from,\n        to,\n        amount,\n        assetId,\n        pc,\n        is,\n      },\n      o,\n    ];\n  }\n}\n\nexport type ReceiptScriptResult = {\n  type: ReceiptType.ScriptResult;\n  /** Result variant with embedded `PanicReason` in first 8 bits and `instr` (u64) */\n  result: BN;\n  /** Gas consumed by the script (u64) */\n  gasUsed: BN;\n};\n\nexport class ReceiptScriptResultCoder extends Coder<ReceiptScriptResult, ReceiptScriptResult> {\n  constructor() {\n    super('ReceiptScriptResult', 'struct ReceiptScriptResult', 0);\n  }\n\n  encode(value: ReceiptScriptResult): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new BigNumberCoder('u64').encode(value.result));\n    parts.push(new BigNumberCoder('u64').encode(value.gasUsed));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [ReceiptScriptResult, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const result = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const gasUsed = decoded;\n\n    return [\n      {\n        type: ReceiptType.ScriptResult,\n        result,\n        gasUsed,\n      },\n      o,\n    ];\n  }\n}\n\nexport type ReceiptMessageOut = {\n  type: ReceiptType.MessageOut;\n  /** Hexadecimal string representation of the 256-bit (32-byte) message ID */\n  messageId: string;\n  /** Hexadecimal string representation of the 256-bit (32-byte) address of the message sender: MEM[$fp, 32] */\n  sender: string;\n  /** Hexadecimal string representation of the 256-bit (32-byte) address of the message recipient: MEM[$rA, 32] */\n  recipient: string;\n  /** Hexadecimal string representation of a 64-bit unsigned integer; value of register $rD */\n  amount: BN;\n  /** Hexadecimal string representation of the 256-bit (32-byte) message nonce */\n  nonce: string;\n  /** Hexadecimal string representation of 256-bit (32-byte), hash of MEM[$rA + 32, $rB] */\n  digest: string;\n  /** Hexadecimal string representation of the value of the memory range MEM[$rA + 32, $rB] */\n  data: Uint8Array;\n};\n\nexport class ReceiptMessageOutCoder extends Coder<ReceiptMessageOut, ReceiptMessageOut> {\n  constructor() {\n    super('ReceiptMessageOut', 'struct ReceiptMessageOut', 0);\n  }\n\n  static getMessageId(\n    value: Pick<ReceiptMessageOut, 'sender' | 'recipient' | 'nonce' | 'amount' | 'data'>\n  ): string {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new ByteArrayCoder(32).encode(value.sender));\n    parts.push(new ByteArrayCoder(32).encode(value.recipient));\n    parts.push(new ByteArrayCoder(32).encode(value.nonce));\n    parts.push(new BigNumberCoder('u64').encode(value.amount));\n    parts.push(arrayify(value.data || '0x'));\n\n    return sha256(concat(parts));\n  }\n\n  encode(value: Omit<ReceiptMessageOut, 'messageId'>): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new B256Coder().encode(value.sender));\n    parts.push(new B256Coder().encode(value.recipient));\n    parts.push(new BigNumberCoder('u64').encode(value.amount));\n    parts.push(new B256Coder().encode(value.nonce));\n    parts.push(new NumberCoder('u16').encode(value.data.length));\n    parts.push(new B256Coder().encode(value.digest));\n    parts.push(new ByteArrayCoder(value.data.length).encode(value.data));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [ReceiptMessageOut, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new B256Coder().decode(data, o);\n    const sender = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const recipient = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const amount = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const nonce = decoded;\n    [decoded, o] = new NumberCoder('u16').decode(data, o);\n    const len = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const digest = decoded;\n    [decoded, o] = new ByteArrayCoder(len).decode(data, o);\n    const messageData = arrayify(decoded);\n\n    const receiptMessageOut: ReceiptMessageOut = {\n      type: ReceiptType.MessageOut,\n      messageId: '',\n      sender,\n      recipient,\n      amount,\n      nonce,\n      digest,\n      data: messageData,\n    };\n    receiptMessageOut.messageId = ReceiptMessageOutCoder.getMessageId(receiptMessageOut);\n\n    return [receiptMessageOut, o];\n  }\n}\n\nexport type ReceiptMint = {\n  type: ReceiptType.Mint;\n\n  subId: string;\n\n  contractId: string;\n\n  assetId: string;\n\n  val: BN;\n  /** Value of register $pc (u64) */\n  pc: BN;\n  /** Value of register $is (u64) */\n  is: BN;\n};\n\nexport const getAssetId = (contractId: string, subId: string): string => {\n  const contractIdBytes = arrayify(contractId);\n  const subIdBytes = arrayify(subId);\n\n  return sha256(concat([contractIdBytes, subIdBytes]));\n};\n\nexport class ReceiptMintCoder extends Coder<ReceiptMint, ReceiptMint> {\n  constructor() {\n    super('ReceiptMint', 'struct ReceiptMint', 0);\n  }\n\n  static getAssetId(contractId: string, subId: string): string {\n    return getAssetId(contractId, subId);\n  }\n\n  encode(value: ReceiptMint): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new B256Coder().encode(value.subId));\n    parts.push(new B256Coder().encode(value.contractId));\n    parts.push(new BigNumberCoder('u64').encode(value.val));\n    parts.push(new BigNumberCoder('u64').encode(value.pc));\n    parts.push(new BigNumberCoder('u64').encode(value.is));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [ReceiptMint, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new B256Coder().decode(data, o);\n    const subId = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const contractId = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const val = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const pc = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const is = decoded;\n\n    const assetId = ReceiptMintCoder.getAssetId(contractId, subId);\n\n    const receiptMint: ReceiptMint = {\n      type: ReceiptType.Mint,\n      subId,\n      contractId,\n      val,\n      pc,\n      is,\n      assetId,\n    };\n\n    return [receiptMint, o];\n  }\n}\n\nexport type ReceiptBurn = {\n  type: ReceiptType.Burn;\n\n  subId: string;\n\n  contractId: string;\n\n  assetId: string;\n\n  val: BN;\n  /** Value of register $pc (u64) */\n  pc: BN;\n  /** Value of register $is (u64) */\n  is: BN;\n};\n\nexport class ReceiptBurnCoder extends Coder<ReceiptBurn, ReceiptBurn> {\n  constructor() {\n    super('ReceiptBurn', 'struct ReceiptBurn', 0);\n  }\n\n  static getAssetId(contractId: string, subId: string): string {\n    return getAssetId(contractId, subId);\n  }\n\n  encode(value: ReceiptBurn): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new B256Coder().encode(value.subId));\n    parts.push(new B256Coder().encode(value.contractId));\n    parts.push(new BigNumberCoder('u64').encode(value.val));\n    parts.push(new BigNumberCoder('u64').encode(value.pc));\n    parts.push(new BigNumberCoder('u64').encode(value.is));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [ReceiptBurn, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new B256Coder().decode(data, o);\n    const subId = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const contractId = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const val = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const pc = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const is = decoded;\n\n    const assetId = ReceiptMintCoder.getAssetId(contractId, subId);\n\n    const receiptBurn: ReceiptBurn = {\n      type: ReceiptType.Burn,\n      subId,\n      contractId,\n      val,\n      pc,\n      is,\n      assetId,\n    };\n\n    return [receiptBurn, o];\n  }\n}\n\nexport type Receipt =\n  | ReceiptCall\n  | ReceiptReturn\n  | ReceiptReturnData\n  | ReceiptPanic\n  | ReceiptRevert\n  | ReceiptLog\n  | ReceiptLogData\n  | ReceiptTransfer\n  | ReceiptTransferOut\n  | ReceiptScriptResult\n  | ReceiptMessageOut\n  | ReceiptMint\n  | ReceiptBurn;\n\nexport class ReceiptCoder extends Coder<Receipt, Receipt> {\n  constructor() {\n    super('Receipt', 'struct Receipt', 0);\n  }\n\n  encode(value: Receipt): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new NumberCoder('u8').encode(value.type));\n\n    const { type } = value;\n\n    switch (value.type) {\n      case ReceiptType.Call: {\n        parts.push(new ReceiptCallCoder().encode(value));\n        break;\n      }\n      case ReceiptType.Return: {\n        parts.push(new ReceiptReturnCoder().encode(value));\n        break;\n      }\n      case ReceiptType.ReturnData: {\n        parts.push(new ReceiptReturnDataCoder().encode(value));\n        break;\n      }\n      case ReceiptType.Panic: {\n        parts.push(new ReceiptPanicCoder().encode(value));\n        break;\n      }\n      case ReceiptType.Revert: {\n        parts.push(new ReceiptRevertCoder().encode(value));\n        break;\n      }\n      case ReceiptType.Log: {\n        parts.push(new ReceiptLogCoder().encode(value));\n        break;\n      }\n      case ReceiptType.LogData: {\n        parts.push(new ReceiptLogDataCoder().encode(value));\n        break;\n      }\n      case ReceiptType.Transfer: {\n        parts.push(new ReceiptTransferCoder().encode(value));\n        break;\n      }\n      case ReceiptType.TransferOut: {\n        parts.push(new ReceiptTransferOutCoder().encode(value));\n        break;\n      }\n      case ReceiptType.ScriptResult: {\n        parts.push(new ReceiptScriptResultCoder().encode(value));\n        break;\n      }\n      case ReceiptType.MessageOut: {\n        parts.push(new ReceiptMessageOutCoder().encode(value));\n        break;\n      }\n      case ReceiptType.Mint: {\n        parts.push(new ReceiptMintCoder().encode(value));\n        break;\n      }\n      case ReceiptType.Burn: {\n        parts.push(new ReceiptBurnCoder().encode(value));\n        break;\n      }\n      default: {\n        throw new FuelError(ErrorCode.INVALID_RECEIPT_TYPE, `Invalid receipt type: ${type}`);\n      }\n    }\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [Receipt, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new NumberCoder('u8').decode(data, o);\n    const type = decoded as ReceiptType;\n    switch (type) {\n      case ReceiptType.Call: {\n        [decoded, o] = new ReceiptCallCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case ReceiptType.Return: {\n        [decoded, o] = new ReceiptReturnCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case ReceiptType.ReturnData: {\n        [decoded, o] = new ReceiptReturnDataCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case ReceiptType.Panic: {\n        [decoded, o] = new ReceiptPanicCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case ReceiptType.Revert: {\n        [decoded, o] = new ReceiptRevertCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case ReceiptType.Log: {\n        [decoded, o] = new ReceiptLogCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case ReceiptType.LogData: {\n        [decoded, o] = new ReceiptLogDataCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case ReceiptType.Transfer: {\n        [decoded, o] = new ReceiptTransferCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case ReceiptType.TransferOut: {\n        [decoded, o] = new ReceiptTransferOutCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case ReceiptType.ScriptResult: {\n        [decoded, o] = new ReceiptScriptResultCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case ReceiptType.MessageOut: {\n        [decoded, o] = new ReceiptMessageOutCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case ReceiptType.Mint: {\n        [decoded, o] = new ReceiptMintCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case ReceiptType.Burn: {\n        [decoded, o] = new ReceiptBurnCoder().decode(data, o);\n        return [decoded, o];\n      }\n      default: {\n        throw new FuelError(ErrorCode.INVALID_RECEIPT_TYPE, `Invalid receipt type: ${type}`);\n      }\n    }\n  }\n}\n","import { B256Coder, StructCoder } from '@fuel-ts/abi-coder';\n\nexport type StorageSlot = {\n  /** Key (b256) */\n  key: string;\n  /** Value (b256) */\n  value: string;\n};\n\nexport class StorageSlotCoder extends StructCoder<{\n  key: B256Coder;\n  value: B256Coder;\n}> {\n  constructor() {\n    super('StorageSlot', {\n      key: new B256Coder(),\n      value: new B256Coder(),\n    });\n  }\n}\n","/* eslint-disable max-classes-per-file */\n\nimport { Coder, ArrayCoder, B256Coder, NumberCoder, BigNumberCoder } from '@fuel-ts/abi-coder';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { type BN } from '@fuel-ts/math';\nimport { concat } from '@fuel-ts/utils';\n\nimport { ByteArrayCoder } from './byte-array';\nimport type { Input, InputContract } from './input';\nimport { InputCoder, InputContractCoder } from './input';\nimport type { Output, OutputContract } from './output';\nimport { OutputCoder, OutputContractCoder } from './output';\nimport type { Policy } from './policy';\nimport { PoliciesCoder } from './policy';\nimport { StorageSlotCoder } from './storage-slot';\nimport type { StorageSlot } from './storage-slot';\nimport type { TxPointer } from './tx-pointer';\nimport { TxPointerCoder } from './tx-pointer';\nimport type { Witness } from './witness';\nimport { WitnessCoder } from './witness';\n\nexport enum TransactionType /* u8 */ {\n  Script = 0,\n  Create = 1,\n  Mint = 2,\n}\n\nexport type TransactionScript = {\n  type: TransactionType.Script;\n\n  /** Gas limit for transaction (u64) */\n  scriptGasLimit: BN;\n\n  /** Script length, in instructions (u16) */\n  scriptLength: number;\n\n  /** Length of script input data, in bytes (u16) */\n  scriptDataLength: number;\n\n  /** Bitfield of used policy types (u32) */\n  policyTypes: number;\n\n  /** Number of inputs (u8) */\n  inputsCount: number;\n\n  /** Number of outputs (u8) */\n  outputsCount: number;\n\n  /** Number of witnesses (u8) */\n  witnessesCount: number;\n\n  /** Merkle root of receipts (b256) */\n  receiptsRoot: string;\n\n  /** Script to execute (byte[]) */\n  script: string;\n\n  /** Script input data (parameters) (byte[]) */\n  scriptData: string;\n\n  /** List of inputs (Input[]) */\n  inputs: Input[];\n\n  /** List of policies, sorted by PolicyType. */\n  policies: Policy[];\n\n  /** List of outputs (Output[]) */\n  outputs: Output[];\n\n  /** List of witnesses (Witness[]) */\n  witnesses: Witness[];\n};\n\nexport class TransactionScriptCoder extends Coder<TransactionScript, TransactionScript> {\n  constructor() {\n    super('TransactionScript', 'struct TransactionScript', 0);\n  }\n\n  encode(value: TransactionScript): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new BigNumberCoder('u64').encode(value.scriptGasLimit));\n    parts.push(new NumberCoder('u32').encode(value.scriptLength));\n    parts.push(new NumberCoder('u32').encode(value.scriptDataLength));\n    parts.push(new NumberCoder('u32').encode(value.policyTypes));\n    parts.push(new NumberCoder('u8').encode(value.inputsCount));\n    parts.push(new NumberCoder('u8').encode(value.outputsCount));\n    parts.push(new NumberCoder('u8').encode(value.witnessesCount));\n    parts.push(new B256Coder().encode(value.receiptsRoot));\n    parts.push(new ByteArrayCoder(value.scriptLength).encode(value.script));\n    parts.push(new ByteArrayCoder(value.scriptDataLength).encode(value.scriptData));\n    parts.push(new PoliciesCoder().encode(value.policies));\n    parts.push(new ArrayCoder(new InputCoder(), value.inputsCount).encode(value.inputs));\n    parts.push(new ArrayCoder(new OutputCoder(), value.outputsCount).encode(value.outputs));\n    parts.push(new ArrayCoder(new WitnessCoder(), value.witnessesCount).encode(value.witnesses));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [TransactionScript, number] {\n    let decoded;\n    let o = offset;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const scriptGasLimit = decoded;\n    [decoded, o] = new NumberCoder('u32').decode(data, o);\n    const scriptLength = decoded;\n    [decoded, o] = new NumberCoder('u32').decode(data, o);\n    const scriptDataLength = decoded;\n    [decoded, o] = new NumberCoder('u32').decode(data, o);\n    const policyTypes = decoded;\n    [decoded, o] = new NumberCoder('u8').decode(data, o);\n    const inputsCount = decoded;\n    [decoded, o] = new NumberCoder('u8').decode(data, o);\n    const outputsCount = decoded;\n    [decoded, o] = new NumberCoder('u8').decode(data, o);\n    const witnessesCount = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const receiptsRoot = decoded;\n    [decoded, o] = new ByteArrayCoder(scriptLength).decode(data, o);\n    const script = decoded;\n    [decoded, o] = new ByteArrayCoder(scriptDataLength).decode(data, o);\n    const scriptData = decoded;\n    [decoded, o] = new PoliciesCoder().decode(data, o, policyTypes);\n    const policies = decoded;\n    [decoded, o] = new ArrayCoder(new InputCoder(), inputsCount).decode(data, o);\n    const inputs = decoded;\n    [decoded, o] = new ArrayCoder(new OutputCoder(), outputsCount).decode(data, o);\n    const outputs = decoded;\n    [decoded, o] = new ArrayCoder(new WitnessCoder(), witnessesCount).decode(data, o);\n    const witnesses = decoded;\n\n    return [\n      {\n        type: TransactionType.Script,\n        scriptGasLimit,\n        scriptLength,\n        scriptDataLength,\n        policyTypes,\n        inputsCount,\n        outputsCount,\n        witnessesCount,\n        receiptsRoot,\n        script,\n        scriptData,\n        policies,\n        inputs,\n        outputs,\n        witnesses,\n      },\n      o,\n    ];\n  }\n}\n\nexport type TransactionCreate = {\n  type: TransactionType.Create;\n\n  /** Contract bytecode length, in instructions (u16) */\n  bytecodeLength: number;\n\n  /** Witness index of contract bytecode to create (u8) */\n  bytecodeWitnessIndex: number;\n\n  /** Bitfield of used policy types (u32) */\n  policyTypes: number;\n\n  /** Number of storage slots to initialize (u16) */\n  storageSlotsCount: number;\n\n  /** Number of inputs (u8) */\n  inputsCount: number;\n\n  /** Number of outputs (u8) */\n  outputsCount: number;\n\n  /** Number of witnesses (u8) */\n  witnessesCount: number;\n\n  /** Salt (b256) */\n  salt: string;\n\n  /** List of policies. */\n  policies: Policy[];\n\n  /** List of inputs (StorageSlot[]) */\n  storageSlots: StorageSlot[];\n\n  /** List of inputs (Input[]) */\n  inputs: Input[];\n\n  /** List of outputs (Output[]) */\n  outputs: Output[];\n\n  /** List of witnesses (Witness[]) */\n  witnesses: Witness[];\n};\n\nexport class TransactionCreateCoder extends Coder<TransactionCreate, TransactionCreate> {\n  constructor() {\n    super('TransactionCreate', 'struct TransactionCreate', 0);\n  }\n\n  encode(value: TransactionCreate): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new NumberCoder('u32').encode(value.bytecodeLength));\n    parts.push(new NumberCoder('u8').encode(value.bytecodeWitnessIndex));\n    parts.push(new NumberCoder('u32').encode(value.policyTypes));\n    parts.push(new NumberCoder('u16').encode(value.storageSlotsCount));\n    parts.push(new NumberCoder('u8').encode(value.inputsCount));\n    parts.push(new NumberCoder('u8').encode(value.outputsCount));\n    parts.push(new NumberCoder('u8').encode(value.witnessesCount));\n    parts.push(new B256Coder().encode(value.salt));\n    parts.push(new PoliciesCoder().encode(value.policies));\n    parts.push(\n      new ArrayCoder(new StorageSlotCoder(), value.storageSlotsCount).encode(value.storageSlots)\n    );\n    parts.push(new ArrayCoder(new InputCoder(), value.inputsCount).encode(value.inputs));\n    parts.push(new ArrayCoder(new OutputCoder(), value.outputsCount).encode(value.outputs));\n    parts.push(new ArrayCoder(new WitnessCoder(), value.witnessesCount).encode(value.witnesses));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [TransactionCreate, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new NumberCoder('u32').decode(data, o);\n    const bytecodeLength = decoded;\n    [decoded, o] = new NumberCoder('u8').decode(data, o);\n    const bytecodeWitnessIndex = decoded;\n    [decoded, o] = new NumberCoder('u32').decode(data, o);\n    const policyTypes = decoded;\n    [decoded, o] = new NumberCoder('u16').decode(data, o);\n    const storageSlotsCount = decoded;\n    [decoded, o] = new NumberCoder('u8').decode(data, o);\n    const inputsCount = decoded;\n    [decoded, o] = new NumberCoder('u8').decode(data, o);\n    const outputsCount = decoded;\n    [decoded, o] = new NumberCoder('u8').decode(data, o);\n    const witnessesCount = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const salt = decoded;\n    [decoded, o] = new PoliciesCoder().decode(data, o, policyTypes);\n    const policies = decoded;\n    [decoded, o] = new ArrayCoder(new StorageSlotCoder(), storageSlotsCount).decode(data, o);\n    const storageSlots = decoded;\n    [decoded, o] = new ArrayCoder(new InputCoder(), inputsCount).decode(data, o);\n    const inputs = decoded;\n    [decoded, o] = new ArrayCoder(new OutputCoder(), outputsCount).decode(data, o);\n    const outputs = decoded;\n    [decoded, o] = new ArrayCoder(new WitnessCoder(), witnessesCount).decode(data, o);\n    const witnesses = decoded;\n\n    return [\n      {\n        type: TransactionType.Create,\n        bytecodeLength,\n        bytecodeWitnessIndex,\n        policyTypes,\n        storageSlotsCount,\n        inputsCount,\n        outputsCount,\n        witnessesCount,\n        salt,\n        policies,\n        storageSlots,\n        inputs,\n        outputs,\n        witnesses,\n      },\n      o,\n    ];\n  }\n}\n\nexport type TransactionMint = {\n  type: TransactionType.Mint;\n\n  /** The location of the Mint transaction in the block. */\n  txPointer: TxPointer;\n\n  /** The contract utxo that assets are minted to. */\n  inputContract: InputContract;\n\n  /** The contract utxo that assets are being minted to. */\n  outputContract: OutputContract;\n\n  /** The amount of funds minted. */\n  mintAmount: BN;\n\n  /** The asset ID corresponding to the minted amount. */\n  mintAssetId: string;\n};\n\nexport class TransactionMintCoder extends Coder<TransactionMint, TransactionMint> {\n  constructor() {\n    super('TransactionMint', 'struct TransactionMint', 0);\n  }\n\n  encode(value: TransactionMint): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new TxPointerCoder().encode(value.txPointer));\n    parts.push(new InputContractCoder().encode(value.inputContract));\n    parts.push(new OutputContractCoder().encode(value.outputContract));\n    parts.push(new BigNumberCoder('u64').encode(value.mintAmount));\n    parts.push(new B256Coder().encode(value.mintAssetId));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [TransactionMint, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new TxPointerCoder().decode(data, o);\n    const txPointer = decoded;\n    [decoded, o] = new InputContractCoder().decode(data, o);\n    const inputContract = decoded;\n    [decoded, o] = new OutputContractCoder().decode(data, o);\n    const outputContract = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const mintAmount = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const mintAssetId = decoded;\n\n    return [\n      {\n        type: TransactionType.Mint,\n        txPointer,\n        inputContract,\n        outputContract,\n        mintAmount,\n        mintAssetId,\n      },\n      o,\n    ];\n  }\n}\ntype PossibleTransactions = TransactionScript | TransactionCreate | TransactionMint;\nexport type Transaction<TTransactionType = void> = TTransactionType extends TransactionType\n  ? Extract<PossibleTransactions, { type: TTransactionType }>\n  : Partial<Omit<TransactionScript, 'type'>> &\n      Partial<Omit<TransactionCreate, 'type'>> &\n      Partial<Omit<TransactionMint, 'type'>> & {\n        type: TransactionType;\n      };\n\nexport class TransactionCoder extends Coder<Transaction, Transaction> {\n  constructor() {\n    super('Transaction', 'struct Transaction', 0);\n  }\n\n  encode(value: Transaction): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new NumberCoder('u8').encode(value.type));\n\n    const { type } = value;\n\n    switch (value.type) {\n      case TransactionType.Script: {\n        parts.push(\n          new TransactionScriptCoder().encode(value as Transaction<TransactionType.Script>)\n        );\n        break;\n      }\n      case TransactionType.Create: {\n        parts.push(\n          new TransactionCreateCoder().encode(value as Transaction<TransactionType.Create>)\n        );\n        break;\n      }\n      case TransactionType.Mint: {\n        parts.push(new TransactionMintCoder().encode(value as Transaction<TransactionType.Mint>));\n        break;\n      }\n      default: {\n        throw new FuelError(\n          ErrorCode.INVALID_TRANSACTION_TYPE,\n          `Invalid transaction type: ${type}`\n        );\n      }\n    }\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [Transaction, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new NumberCoder('u8').decode(data, o);\n    const type = decoded as TransactionType;\n\n    switch (type) {\n      case TransactionType.Script: {\n        [decoded, o] = new TransactionScriptCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case TransactionType.Create: {\n        [decoded, o] = new TransactionCreateCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case TransactionType.Mint: {\n        [decoded, o] = new TransactionMintCoder().decode(data, o);\n        return [decoded, o];\n      }\n      default: {\n        throw new FuelError(\n          ErrorCode.INVALID_TRANSACTION_TYPE,\n          `Invalid transaction type: ${type}`\n        );\n      }\n    }\n  }\n}\n","import { Coder, NumberCoder } from '@fuel-ts/abi-coder';\nimport { concat } from '@fuel-ts/utils';\n\nimport { ByteArrayCoder } from './byte-array';\n\nexport type Witness = {\n  /** Length of witness data byte array */\n  dataLength: number;\n  /** Witness data (byte[]) */\n  data: string;\n};\n\nexport class WitnessCoder extends Coder<Witness, Witness> {\n  constructor() {\n    super(\n      'Witness',\n      // Types of dynamic length are not supported in the ABI\n      'unknown',\n      0\n    );\n  }\n\n  encode(value: Witness): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new NumberCoder('u32').encode(value.dataLength));\n    parts.push(new ByteArrayCoder(value.dataLength).encode(value.data));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [Witness, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new NumberCoder('u32').decode(data, o);\n    const dataLength = decoded;\n    [decoded, o] = new ByteArrayCoder(dataLength).decode(data, o);\n    const witnessData = decoded;\n\n    return [\n      {\n        dataLength,\n        data: witnessData,\n      },\n      o,\n    ];\n  }\n}\n","import { B256Coder, NumberCoder, StructCoder } from '@fuel-ts/abi-coder';\n\nexport type UtxoId = {\n  /** Transaction ID (b256) */\n  transactionId: string;\n  /** Output index (u8) */\n  outputIndex: number;\n};\n\nexport class UtxoIdCoder extends StructCoder<{\n  transactionId: B256Coder;\n  outputIndex: NumberCoder;\n}> {\n  constructor() {\n    super('UtxoId', {\n      transactionId: new B256Coder(),\n      outputIndex: new NumberCoder('u8'),\n    });\n  }\n}\n"],"mappings":"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","names":["Coder","NumberCoder","concat","arrayify","InputType","Coder","NumberCoder","concat","arrayify","Coder","B256Coder","NumberCoder","BigNumberCoder","ErrorCode","FuelError","concat","OutputType","BigNumberCoder","Coder","NumberCoder","ErrorCode","FuelError","concat","PolicyType","Coder","BigNumberCoder","B256Coder","NumberCoder","ErrorCode","FuelError","sha256","arrayify","concat","ReceiptType","Coder","B256Coder","BigNumberCoder","concat","arrayify","sha256","NumberCoder","FuelError","ErrorCode","B256Coder","StructCoder","Coder","B256Coder","NumberCoder","BigNumberCoder","ErrorCode","FuelError","concat","Coder","NumberCoder","concat","Coder","NumberCoder","concat","TransactionType","Coder","BigNumberCoder","NumberCoder","B256Coder","concat","FuelError","ErrorCode","B256Coder","NumberCoder","StructCoder"]}