{"version":3,"sources":["../src/index.ts","../src/hasher.ts"],"sourcesContent":["export * from './hasher';\n","import { bufferFromString } from '@fuel-ts/crypto';\nimport type { BytesLike } from '@fuel-ts/interfaces';\nimport { arrayify, hexlify } from '@fuel-ts/utils';\nimport { sha256 as sha256AsBytes } from '@noble/hashes/sha256';\n\n/**\n * @param data - The data to be hashed\n * @returns A sha256 hash of the data in hex format\n */\nexport function sha256(data: BytesLike): string {\n  return hexlify(sha256AsBytes(arrayify(data)));\n}\n\n/**\n * wrap sha256\n *\n * @param data - The data to be hash\n * @returns A sha256 hash of the data\n */\nexport function hash(data: BytesLike): string {\n  return sha256(data);\n}\n\n/**\n * Convert a uint64 number to a big-endian byte array\n */\nexport function uint64ToBytesBE(value: number): Uint8Array {\n  const bigIntValue = BigInt(value);\n  const buffer = new ArrayBuffer(8);\n  const dataView = new DataView(buffer);\n  dataView.setBigUint64(0, bigIntValue, false); // write the uint64 value in big-endian order\n  return new Uint8Array(dataView.buffer);\n}\n\n/**\n * hash string messages with sha256\n *\n * @param msg - The string message to be hashed\n * @returns A sha256 hash of the message\n */\nexport function hashMessage(msg: string) {\n  return hash(bufferFromString(msg, 'utf-8'));\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,oBAAiC;AAEjC,mBAAkC;AAClC,oBAAwC;AAMjC,SAAS,OAAO,MAAyB;AAC9C,aAAO,0BAAQ,cAAAA,YAAc,uBAAS,IAAI,CAAC,CAAC;AAC9C;AAQO,SAAS,KAAK,MAAyB;AAC5C,SAAO,OAAO,IAAI;AACpB;AAKO,SAAS,gBAAgB,OAA2B;AACzD,QAAM,cAAc,OAAO,KAAK;AAChC,QAAM,SAAS,IAAI,YAAY,CAAC;AAChC,QAAM,WAAW,IAAI,SAAS,MAAM;AACpC,WAAS,aAAa,GAAG,aAAa,KAAK;AAC3C,SAAO,IAAI,WAAW,SAAS,MAAM;AACvC;AAQO,SAAS,YAAY,KAAa;AACvC,SAAO,SAAK,gCAAiB,KAAK,OAAO,CAAC;AAC5C;","names":["sha256AsBytes"]}