import type { TypesOfCoder } from '../AbstractCoder';
import { Coder } from '../AbstractCoder';
type InputValueOf<TCoder extends Coder> = Array<TypesOfCoder<TCoder>['Input']>;
type DecodedValueOf<TCoder extends Coder> = Array<TypesOfCoder<TCoder>['Decoded']>;
export declare class ArrayCoder<TCoder extends Coder> extends Coder<InputValueOf<TCoder>, DecodedValueOf<TCoder>> {
    coder: TCoder;
    length: number;
    constructor(coder: TCoder, length: number);
    encode(value: InputValueOf<TCoder>): Uint8Array;
    decode(data: Uint8Array, offset: number): [DecodedValueOf<TCoder>, number];
}
export {};
//# sourceMappingURL=ArrayCoder.d.ts.map