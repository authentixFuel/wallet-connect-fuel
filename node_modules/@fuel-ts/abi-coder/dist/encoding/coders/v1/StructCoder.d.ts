import type { TypesOfCoder } from '../AbstractCoder';
import { Coder } from '../AbstractCoder';
type InputValueOf<TCoders extends Record<string, Coder>> = {
    [P in keyof TCoders]: TypesOfCoder<TCoders[P]>['Input'];
};
type DecodedValueOf<TCoders extends Record<string, Coder>> = {
    [P in keyof TCoders]: TypesOfCoder<TCoders[P]>['Decoded'];
};
export declare class StructCoder<TCoders extends Record<string, Coder>> extends Coder<InputValueOf<TCoders>, DecodedValueOf<TCoders>> {
    name: string;
    coders: TCoders;
    constructor(name: string, coders: TCoders);
    encode(value: InputValueOf<TCoders>): Uint8Array;
    decode(data: Uint8Array, offset: number): [DecodedValueOf<TCoders>, number];
}
export {};
//# sourceMappingURL=StructCoder.d.ts.map