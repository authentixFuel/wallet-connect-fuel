import type { RequireExactlyOne } from 'type-fest';
import type { TypesOfCoder } from '../AbstractCoder';
import { Coder } from '../AbstractCoder';
export type InputValueOf<TCoders extends Record<string, Coder>> = RequireExactlyOne<{
    [P in keyof TCoders]: TypesOfCoder<TCoders[P]>['Input'];
}>;
export type DecodedValueOf<TCoders extends Record<string, Coder>> = RequireExactlyOne<{
    [P in keyof TCoders]: TypesOfCoder<TCoders[P]>['Decoded'];
}>;
export declare class EnumCoder<TCoders extends Record<string, Coder>> extends Coder<InputValueOf<TCoders>, DecodedValueOf<TCoders>> {
    #private;
    name: string;
    coders: TCoders;
    constructor(name: string, coders: TCoders);
    encode(value: InputValueOf<TCoders>): Uint8Array;
    decode(data: Uint8Array, offset: number): [DecodedValueOf<TCoders>, number];
}
//# sourceMappingURL=EnumCoder.d.ts.map