import type { BytesLike } from '@fuel-ts/interfaces';
import { FunctionFragment } from './FunctionFragment';
import type { InputValue } from './encoding/coders/AbstractCoder';
import type { JsonAbi, JsonAbiConfigurable } from './types/JsonAbi';
export declare class Interface<TAbi extends JsonAbi = JsonAbi> {
    readonly functions: Record<string, FunctionFragment>;
    readonly configurables: Record<string, JsonAbiConfigurable>;
    readonly jsonAbi: TAbi;
    constructor(jsonAbi: TAbi);
    /**
     * Returns function fragment for a dynamic input.
     * @param nameOrSignatureOrSelector - name (e.g. 'transfer'), signature (e.g. 'transfer(address,uint256)') or selector (e.g. '0x00000000a9059cbb') of the function fragment
     */
    getFunction(nameOrSignatureOrSelector: string): FunctionFragment;
    decodeFunctionData(functionFragment: FunctionFragment | string, data: BytesLike): any;
    encodeFunctionData(functionFragment: FunctionFragment | string, values: Array<InputValue>, offset?: number): Uint8Array;
    decodeFunctionResult(functionFragment: FunctionFragment | string, data: BytesLike): any;
    decodeLog(data: BytesLike, logId: number): any;
    encodeConfigurable(name: string, value: InputValue): Uint8Array;
    getTypeById(typeId: number): import("./types/JsonAbi").JsonAbiType;
}
//# sourceMappingURL=Interface.d.ts.map