import type { BytesLike } from '@fuel-ts/interfaces';
import type { DecodedValue, InputValue } from './encoding/coders/AbstractCoder';
import type { JsonAbi, JsonAbiFunction, JsonAbiFunctionAttribute } from './types/JsonAbi';
export declare class FunctionFragment<TAbi extends JsonAbi = JsonAbi, FnName extends TAbi['functions'][number]['name'] = string> {
    #private;
    readonly signature: string;
    readonly selector: string;
    readonly name: string;
    readonly jsonFn: JsonAbiFunction;
    readonly attributes: readonly JsonAbiFunctionAttribute[];
    readonly isInputDataPointer: boolean;
    readonly outputMetadata: {
        isHeapType: boolean;
        encodedLength: number;
    };
    private readonly jsonAbi;
    constructor(jsonAbi: JsonAbi, name: FnName);
    private static getSignature;
    private static getFunctionSelector;
    encodeArguments(values: InputValue[], offset?: number): Uint8Array;
    private static verifyArgsAndInputsAlign;
    decodeArguments(data: BytesLike): unknown[] | undefined;
    decodeOutput(data: BytesLike): [DecodedValue | undefined, number];
}
//# sourceMappingURL=FunctionFragment.d.ts.map