"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  checkFuelCoreVersionCompatibility: () => checkFuelCoreVersionCompatibility,
  versions: () => versions
});
module.exports = __toCommonJS(src_exports);

// src/lib/getBuiltinVersions.ts
function getBuiltinVersions() {
  return {
    FORC: "0.49.3",
    FUEL_CORE: "0.22.1",
    FUELS: "0.79.0"
  };
}

// src/lib/semver.ts
function parseVersion(version) {
  const [major, minor, patch] = version.split(".").map((v) => parseInt(v, 10));
  return { major, minor, patch };
}
function versionDiffs(version1, version2) {
  const semver1 = parseVersion(version1);
  const semver2 = parseVersion(version2);
  const major = semver1.major - semver2.major;
  const minor = semver1.minor - semver2.minor;
  const patch = semver1.patch - semver2.patch;
  return {
    major,
    minor,
    patch,
    fullVersionDiff: major || minor || patch
  };
}
function majorEq(version1, version2) {
  const { major } = versionDiffs(version1, version2);
  return major === 0;
}
function minorEq(version1, version2) {
  const { minor } = versionDiffs(version1, version2);
  return minor === 0;
}
function patchEq(version1, version2) {
  const { patch } = versionDiffs(version1, version2);
  return patch === 0;
}

// src/lib/checkFuelCoreVersionCompatibility.ts
function checkFuelCoreVersionCompatibility(networkVersion) {
  const { FUEL_CORE: supportedVersion } = getBuiltinVersions();
  if (/^\d+\.\d+\.\d+\D+/m.test(networkVersion)) {
    console.warn(`You're running against an unreleased fuel-core version: ${networkVersion}. Things may work as expected, but it's not guaranteed. Please use a released version.      
This unreleased fuel-core build may include features and updates not yet supported by this version of the TS-SDK.`);
  }
  return {
    supportedVersion,
    isMajorSupported: majorEq(networkVersion, supportedVersion),
    isMinorSupported: minorEq(networkVersion, supportedVersion),
    isPatchSupported: patchEq(networkVersion, supportedVersion)
  };
}

// src/index.ts
var versions = getBuiltinVersions();
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  checkFuelCoreVersionCompatibility,
  versions
});
//# sourceMappingURL=index.js.map