{"version":3,"sources":["../src/shared/scrypt.ts","../src/shared/keccak256.ts","../src/browser/aes-ctr.ts","../src/browser/bufferFromString.ts","../src/browser/crypto.ts","../src/browser/randomBytes.ts","../src/browser/stringFromBuffer.ts","../src/browser/encryptJsonWalletData.ts","../src/browser/index.ts","../src/index.browser.ts"],"sourcesContent":["import { scrypt as scryptNoble } from '@noble/hashes/scrypt';\n\nimport type { IScryptParams } from '../types';\n\nexport const scrypt = (params: IScryptParams): Uint8Array => {\n  const { password, salt, n, p, r, dklen } = params;\n  const derivedKey = scryptNoble(password, salt, { N: n, r, p, dkLen: dklen });\n\n  return derivedKey;\n};\n","import { keccak_256 } from '@noble/hashes/sha3';\n\nexport const keccak256 = (data: Uint8Array): Uint8Array => keccak_256(data);\n","import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { arrayify } from '@fuel-ts/utils';\nimport { pbkdf2 } from 'ethers';\n\nimport type { CryptoApi, Keystore } from '../types';\n\nimport { bufferFromString } from './bufferFromString';\nimport { randomBytes } from './randomBytes';\nimport { stringFromBuffer } from './stringFromBuffer';\n\nconst ALGORITHM = 'AES-CTR';\n\n/**\n * Generate a pbkdf2 key from a password and random salt\n */\nexport const keyFromPassword: CryptoApi['keyFromPassword'] = (\n  password: string,\n  saltBuffer: Uint8Array\n): Uint8Array => {\n  const passBuffer = bufferFromString(String(password).normalize('NFKC'), 'utf-8');\n  const key = pbkdf2(passBuffer, saltBuffer, 100000, 32, 'sha256');\n  return arrayify(key);\n};\n\n/**\n * Encrypts a data object that can be any serializable value using\n * a provided password.\n *\n * @returns Promise<Keystore> object\n */\nexport const encrypt: CryptoApi['encrypt'] = async <T>(\n  password: string,\n  data: T\n): Promise<Keystore> => {\n  const iv = randomBytes(16);\n  const salt = randomBytes(32);\n  const secret = keyFromPassword(password, salt);\n  const dataString = JSON.stringify(data);\n  const dataBuffer = bufferFromString(dataString, 'utf-8');\n  const alg = {\n    name: ALGORITHM,\n    counter: iv,\n    length: 64,\n  };\n  const key = await crypto.subtle.importKey('raw', secret, alg, false, ['encrypt']);\n  const encBuffer = await crypto.subtle.encrypt(alg, key, dataBuffer);\n\n  return {\n    data: stringFromBuffer(encBuffer),\n    iv: stringFromBuffer(iv),\n    salt: stringFromBuffer(salt),\n  };\n};\n\n/**\n * Given a password and a keystore object, decrypts the text and returns\n * the resulting value\n */\nexport const decrypt: CryptoApi['decrypt'] = async <T>(\n  password: string,\n  keystore: Keystore\n): Promise<T> => {\n  const iv = bufferFromString(keystore.iv);\n  const salt = bufferFromString(keystore.salt);\n  const secret = keyFromPassword(password, salt);\n  const encryptedText = bufferFromString(keystore.data);\n\n  const alg = {\n    name: ALGORITHM,\n    counter: iv,\n    length: 64,\n  };\n  const key = await crypto.subtle.importKey('raw', secret, alg, false, ['decrypt']);\n\n  const ptBuffer = await crypto.subtle.decrypt(alg, key, encryptedText);\n  const decryptedData = new TextDecoder().decode(ptBuffer);\n\n  try {\n    return JSON.parse(decryptedData);\n  } catch {\n    throw new FuelError(ErrorCode.INVALID_CREDENTIALS, 'Invalid credentials.');\n  }\n};\n","import type { CryptoApi, Encoding } from '../types';\n\nexport const bufferFromString: CryptoApi['bufferFromString'] = (\n  string: string,\n  encoding: Encoding = 'base64'\n): Uint8Array => {\n  switch (encoding) {\n    case 'utf-8': {\n      return new TextEncoder().encode(string);\n    }\n\n    case 'base64': {\n      const binaryString = atob(string);\n      const len = binaryString.length;\n      const bytes = new Uint8Array(len).map((_, i) => binaryString.charCodeAt(i));\n\n      return bytes;\n    }\n\n    case 'hex':\n    default: {\n      const bufferLength = string.length / 2;\n\n      const buffer = new Uint8Array(bufferLength).map((_, i) => {\n        const startIndex = i * 2;\n        const byteValue = parseInt(string.substring(startIndex, startIndex + 2), 16);\n        return byteValue;\n      });\n\n      return buffer;\n    }\n  }\n};\n","import { ErrorCode, FuelError } from '@fuel-ts/errors';\n\nconst { crypto, btoa } = globalThis;\n\nif (!crypto) {\n  throw new FuelError(\n    ErrorCode.ENV_DEPENDENCY_MISSING,\n    `Could not find 'crypto' in current browser environment.`\n  );\n}\n\nif (!btoa) {\n  throw new FuelError(\n    ErrorCode.ENV_DEPENDENCY_MISSING,\n    `Could not find 'btoa' in current browser environment.`\n  );\n}\n\nexport { crypto, btoa };\n","import type { CryptoApi } from '../types';\n\nimport { crypto } from './crypto';\n\nexport const randomBytes: CryptoApi['randomBytes'] = (length: number): Uint8Array => {\n  const randomValues = crypto.getRandomValues(new Uint8Array(length));\n  return randomValues;\n};\n","import type { CryptoApi, Encoding } from '../types';\n\nimport { btoa } from './crypto';\n\nexport const stringFromBuffer: CryptoApi['stringFromBuffer'] = (\n  buffer: Uint8Array,\n  encoding: Encoding = 'base64'\n): string => {\n  switch (encoding) {\n    case 'utf-8': {\n      return new TextDecoder().decode(buffer);\n    }\n    case 'base64': {\n      const binary = String.fromCharCode.apply(null, new Uint8Array(buffer) as unknown as number[]);\n      return btoa(binary);\n    }\n\n    case 'hex':\n    default: {\n      let hexString = '';\n      for (let i = 0; i < buffer.length; i += 1) {\n        const hex = buffer[i].toString(16);\n        hexString += hex.length === 1 ? `0${hex}` : hex;\n      }\n      return hexString;\n    }\n  }\n};\n","import type { CryptoApi } from '../types';\n\nimport { crypto } from './crypto';\n\nexport const encryptJsonWalletData: CryptoApi['encryptJsonWalletData'] = async (\n  data: Uint8Array,\n  key: Uint8Array,\n  iv: Uint8Array\n): Promise<Uint8Array> => {\n  const subtle = crypto.subtle;\n  const keyBuffer = new Uint8Array(key.subarray(0, 16));\n  const ivBuffer = iv;\n  const dataBuffer = data;\n\n  const cryptoKey = await subtle.importKey(\n    'raw',\n    keyBuffer,\n    { name: 'AES-CTR', length: 128 },\n    false,\n    ['encrypt', 'decrypt']\n  );\n\n  const encrypted = (await subtle.encrypt(\n    { name: 'AES-CTR', counter: ivBuffer, length: 128 },\n    cryptoKey,\n    dataBuffer\n  )) as ArrayBuffer;\n\n  return new Uint8Array(encrypted);\n};\n\nexport const decryptJsonWalletData: CryptoApi['decryptJsonWalletData'] = async (\n  data: Uint8Array,\n  key: Uint8Array,\n  iv: Uint8Array\n): Promise<Uint8Array> => {\n  const subtle = crypto.subtle;\n  const keyBuffer = new Uint8Array(key.subarray(0, 16)).buffer;\n  const ivBuffer = new Uint8Array(iv).buffer;\n  const dataBuffer = new Uint8Array(data).buffer;\n\n  const cryptoKey = await subtle.importKey(\n    'raw',\n    keyBuffer,\n    { name: 'AES-CTR', length: 128 },\n    false,\n    ['encrypt', 'decrypt']\n  );\n\n  const decrypted = (await subtle.decrypt(\n    { name: 'AES-CTR', counter: ivBuffer, length: 128 },\n    cryptoKey,\n    dataBuffer\n  )) as ArrayBuffer;\n\n  return new Uint8Array(decrypted);\n};\n","import { scrypt, keccak256 } from '../shared';\nimport type { CryptoApi } from '../types';\n\nimport { decrypt, encrypt, keyFromPassword } from './aes-ctr';\nimport { bufferFromString } from './bufferFromString';\nimport { decryptJsonWalletData, encryptJsonWalletData } from './encryptJsonWalletData';\nimport { randomBytes } from './randomBytes';\nimport { stringFromBuffer } from './stringFromBuffer';\n\nconst api: CryptoApi = {\n  bufferFromString,\n  stringFromBuffer,\n  decrypt,\n  encrypt,\n  keyFromPassword,\n  randomBytes,\n  scrypt,\n  keccak256,\n  decryptJsonWalletData,\n  encryptJsonWalletData,\n};\n\nexport default api;\n","import cryptoApi from './browser';\n\nexport * from './types';\n\nexport const {\n  bufferFromString,\n  decrypt,\n  encrypt,\n  keyFromPassword,\n  randomBytes,\n  stringFromBuffer,\n  scrypt,\n  keccak256,\n  decryptJsonWalletData,\n  encryptJsonWalletData,\n} = cryptoApi;\n"],"mappings":"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","names":["ErrorCode","FuelError","crypto","crypto","FuelError","ErrorCode","crypto","bufferFromString","decrypt","encrypt","keyFromPassword","randomBytes","stringFromBuffer","scrypt","keccak256","decryptJsonWalletData","encryptJsonWalletData"]}