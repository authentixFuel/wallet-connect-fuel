{"version":3,"sources":["../src/test-utils/safeExec.ts","../src/error-codes.ts","../src/test-utils/expect-to-throw-fuel-error.ts"],"sourcesContent":["export const safeExec = async <TResult = unknown, TError extends Error = Error>(\n  lambda: () => TResult\n) => {\n  let error: TError | undefined;\n  let result: TResult | undefined;\n\n  try {\n    result = await lambda();\n  } catch (_error: unknown) {\n    error = _error as TError;\n  }\n\n  return { error, result };\n};\n","/**\n * Represents the different error codes thrown by the SDK\n */\nexport enum ErrorCode {\n  // abi\n  NO_ABIS_FOUND = 'no-abis-found',\n  ABI_TYPES_AND_VALUES_MISMATCH = 'abi-types-and-values-mismatch',\n  ABI_MAIN_METHOD_MISSING = 'abi-main-method-missing',\n  INVALID_COMPONENT = 'invalid-component',\n  FRAGMENT_NOT_FOUND = 'fragment-not-found',\n  CONFIGURABLE_NOT_FOUND = 'configurable-not-found',\n  TYPE_NOT_FOUND = 'type-not-found',\n  TYPE_NOT_SUPPORTED = 'type-not-supported',\n  INVALID_DECODE_VALUE = 'invalid-decode-value',\n  JSON_ABI_ERROR = 'json-abi-error',\n  TYPE_ID_NOT_FOUND = 'type-id-not-found',\n  BIN_FILE_NOT_FOUND = 'bin-file-not-found',\n  CODER_NOT_FOUND = 'coder-not-found',\n  INVALID_DATA = 'invalid-data',\n  FUNCTION_NOT_FOUND = 'function-not-found',\n  UNSUPPORTED_ENCODING_VERSION = 'unsupported-encoding-version',\n\n  // address\n  INVALID_BECH32_ADDRESS = 'invalid-bech32-address',\n  INVALID_EVM_ADDRESS = 'invalid-evm-address',\n  INVALID_B256_ADDRESS = 'invalid-b256-address',\n\n  // provider\n  INVALID_URL = 'invalid-url',\n  CHAIN_INFO_CACHE_EMPTY = 'chain-info-cache-empty',\n  NODE_INFO_CACHE_EMPTY = 'node-info-cache-empty',\n  MISSING_PROVIDER = 'missing-provider',\n  INVALID_PROVIDER = 'invalid-provider',\n  CONNECTION_REFUSED = 'connection-refused',\n\n  // wallet\n  INVALID_PUBLIC_KEY = 'invalid-public-key',\n  INSUFFICIENT_BALANCE = 'insufficient-balance',\n  WALLET_MANAGER_ERROR = 'wallet-manager-error',\n  HD_WALLET_ERROR = 'hd-wallet-error',\n  MISSING_CONNECTOR = 'missing-connector',\n\n  // errors\n  PARSE_FAILED = 'parse-failed',\n  ENCODE_ERROR = 'encode-error',\n  DECODE_ERROR = 'decode-error',\n  INVALID_CREDENTIALS = 'invalid-credentials',\n  ENV_DEPENDENCY_MISSING = 'env-dependency-missing',\n  INVALID_TTL = 'invalid-ttl',\n  INVALID_INPUT_PARAMETERS = 'invalid-input-parameters',\n  NOT_IMPLEMENTED = 'not-implemented',\n  NOT_SUPPORTED = 'not-supported',\n  CONVERTING_FAILED = 'converting-error',\n  ELEMENT_NOT_FOUND = 'element-not-found',\n  MISSING_REQUIRED_PARAMETER = 'missing-required-parameter',\n  INVALID_REQUEST = 'invalid-request',\n  UNEXPECTED_HEX_VALUE = 'unexpected-hex-value',\n  INVALID_TRANSFER_AMOUNT = 'invalid-transfer-amount',\n\n  // transaction\n  GAS_PRICE_TOO_LOW = 'gas-price-too-low',\n  GAS_LIMIT_TOO_LOW = 'gas-limit-too-low',\n  TRANSACTION_NOT_FOUND = 'transaction-not-found',\n  TRANSACTION_FAILED = 'transaction-failed',\n  INVALID_CONFIGURABLE_CONSTANTS = 'invalid-configurable-constants',\n  INVALID_TRANSACTION_INPUT = 'invalid-transaction-input',\n  INVALID_TRANSACTION_OUTPUT = 'invalid-transaction-output',\n  INVALID_TRANSACTION_STATUS = 'invalid-transaction-status',\n  INVALID_TRANSACTION_TYPE = 'invalid-transaction-type',\n  TRANSACTION_ERROR = 'transaction-error',\n  INVALID_POLICY_TYPE = 'invalid-policy-type',\n  DUPLICATED_POLICY = 'duplicated-policy',\n  TRANSACTION_SQUEEZED_OUT = 'transaction-squeezed-out',\n\n  // receipt\n  INVALID_RECEIPT_TYPE = 'invalid-receipt-type',\n\n  // mnemonic\n  INVALID_WORD_LIST = 'invalid-word-list',\n  INVALID_MNEMONIC = 'invalid-mnemonic',\n  INVALID_ENTROPY = 'invalid-entropy',\n  INVALID_SEED = 'invalid-seed',\n  INVALID_CHECKSUM = 'invalid-checksum',\n\n  // wallet / account\n  INVALID_PASSWORD = 'invalid-password',\n  ACCOUNT_REQUIRED = 'account-required',\n  UNLOCKED_WALLET_REQUIRED = 'unlocked-wallet-required',\n\n  // chain\n  LATEST_BLOCK_UNAVAILABLE = 'latest-block-unavailable',\n  ERROR_BUILDING_BLOCK_EXPLORER_URL = 'error-building-block-explorer-url',\n  UNSUPPORTED_FUEL_CLIENT_VERSION = 'unsupported-fuel-client-version',\n\n  // docs\n  VITEPRESS_PLUGIN_ERROR = 'vitepress-plugin-error',\n\n  // contract\n  INVALID_MULTICALL = 'invalid-multicall',\n\n  // script\n  SCRIPT_REVERTED = 'script-reverted',\n  SCRIPT_RETURN_INVALID_TYPE = 'script-return-invalid-type',\n\n  // graphql\n  STREAM_PARSING_ERROR = 'stream-parsing-error',\n\n  // coder\n  // ...\n}\n","import { ErrorCode } from '../error-codes';\nimport type { FuelError } from '../fuel-error';\n\nimport { safeExec } from './safeExec';\n\ntype ExpectedFuelError = Partial<FuelError> & Required<Pick<FuelError, 'code'>>;\n\nconst codes = Object.values(ErrorCode);\n\nexport const expectToThrowFuelError = async (\n  lambda: () => unknown,\n  expectedError: ExpectedFuelError\n) => {\n  if (!expectedError.code) {\n    throw new Error('Expected error must contain a code.');\n  }\n\n  if (!codes.includes(expectedError.code)) {\n    throw new Error(`Expected error code '${expectedError.code}' is not a valid FuelError code.`);\n  }\n\n  const { error: thrownError } = await safeExec<unknown, FuelError>(lambda);\n\n  if (!thrownError) {\n    throw new Error(`Passed-in lambda didn't throw.`);\n  }\n\n  const thrownErrorStr = `Thrown error >>> ${thrownError.toString()}`;\n\n  if (!thrownError.code) {\n    throw new Error(`Thrown error must contain a code. ${thrownErrorStr}`);\n  }\n\n  if (!codes.includes(thrownError.code)) {\n    throw new Error(\n      `Thrown error code '${thrownError.code}' is not a valid FuelError code. ${thrownErrorStr}`\n    );\n  }\n\n  expect(thrownError.name).toEqual('FuelError');\n  expect(thrownError).toMatchObject(expectedError);\n};\n"],"mappings":"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","names":["ErrorCode"]}