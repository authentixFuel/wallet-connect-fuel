import type { AbstractAddress } from '@fuel-ts/interfaces';
import { Account } from '../account';
import { Provider } from '../providers';
import type { StorageAbstract } from '../wallet-manager';
import { FuelConnector } from './fuel-connector';
import type { Network, TargetObject } from './types';
export type FuelConfig = {
    connectors?: Array<FuelConnector>;
    storage?: StorageAbstract | null;
    targetObject?: TargetObject;
};
export type FuelConnectorSelectOptions = {
    emitEvents?: boolean;
};
export type Status = {
    installed: boolean;
    connected: boolean;
};
export declare class Fuel extends FuelConnector {
    static STORAGE_KEY: string;
    static defaultConfig: FuelConfig;
    private _storage?;
    private _connectors;
    private _targetObject;
    private _unsubscribes;
    private _targetUnsubscribe;
    private _pingCache;
    private _currentConnector?;
    constructor(config?: FuelConfig);
    /**
     * Return the target object to listen for global events.
     */
    private getTargetObject;
    /**
     * Return the storage used.
     */
    private getStorage;
    /**
     * Setup the default connector from the storage.
     */
    private setDefaultConnector;
    /**
     * Start listener for all the events of the current
     * connector and emit them to the Fuel instance
     */
    private setupConnectorEvents;
    /**
     * Call method from the current connector.
     */
    private callMethod;
    /**
     * Create a method for each method proxy that is available on the Common interface
     * and call the method from the current connector.
     */
    private setupMethods;
    /**
     * Fetch the status of a connector and set the installed and connected
     * status.
     */
    private fetchConnectorStatus;
    /**
     * Fetch the status of all connectors and set the installed and connected
     * status.
     */
    private fetchConnectorsStatus;
    /**
     * Fetch the status of a connector and set the installed and connected
     * status. If no connector is provided it will ping the current connector.
     */
    private pingConnector;
    /**
     * Setup a listener for the FuelConnector event and add the connector
     * to the list of new connectors.
     */
    private setupConnectorListener;
    /**
     * Add a new connector to the list of connectors.
     */
    private addConnector;
    private triggerConnectorEvents;
    /**
     * Get a connector from the list of connectors.
     */
    getConnector: (connector: FuelConnector | string) => FuelConnector | null;
    /**
     * Return the list of connectors with the status of installed and connected.
     */
    connectors(): Promise<Array<FuelConnector>>;
    /**
     * Set the current connector to be used.
     */
    selectConnector(connectorName: string, options?: FuelConnectorSelectOptions): Promise<boolean>;
    /**
     * Return the current selected connector.
     */
    currentConnector(): FuelConnector | null | undefined;
    /**
     * Return true if any connector is available.
     */
    hasConnector(): Promise<boolean>;
    hasWallet(): Promise<boolean>;
    /**
     * Return a Fuel Provider instance with extends features to work with
     * connectors.
     *
     * @deprecated getProvider is deprecated and is going to be removed in the future, use getWallet instead.
     */
    getProvider(providerOrNetwork?: Provider | Network): Promise<Provider>;
    /**
     * Return a Fuel Provider instance with extends features to work with
     * connectors.
     */
    private _getProvider;
    /**
     * Return a Fuel Wallet Locked instance with extends features to work with
     * connectors.
     */
    getWallet(address: string | AbstractAddress, providerOrNetwork?: Provider | Network): Promise<Account>;
    /**
     * Remove all open listeners this is useful when you want to
     * remove the Fuel instance and avoid memory leaks.
     */
    unsubscribe(): void;
    /**
     * Clean all the data from the storage.
     */
    clean(): Promise<void>;
    /**
     * Removes all listeners and cleans the storage.
     */
    destroy(): Promise<void>;
}
//# sourceMappingURL=fuel.d.ts.map