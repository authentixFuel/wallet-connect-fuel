/// <reference types="node" />
import { EventEmitter } from 'events';
import type { TransactionRequestLike } from '../providers';
import type { Asset } from '../providers/assets/types';
import { FuelConnectorEventTypes } from './types';
import type { FuelConnectorEvents, ConnectorMetadata, FuelABI, Network, FuelEventArg, Version } from './types';
/**
 * @name FuelConnector
 *
 * Wallet Connector is a interface that represents a Wallet Connector and all the methods
 * that should be implemented to be compatible with the Fuel SDK.
 */
export declare abstract class FuelConnector extends EventEmitter {
    name: string;
    metadata: ConnectorMetadata;
    connected: boolean;
    installed: boolean;
    events: typeof FuelConnectorEventTypes;
    /**
     * Should return true if the connector is loaded
     * in less then one second.
     *
     * @returns Always true.
     */
    ping(): Promise<boolean>;
    /**
     * Should return the current version of the connector
     * and the network version that is compatible.
     *
     * @returns boolean - connection status.
     */
    version(): Promise<Version>;
    /**
     * Should return true if the connector is connected
     * to any of the accounts available.
     *
     * @returns The connection status.
     */
    isConnected(): Promise<boolean>;
    /**
     * Should return all the accounts authorized for the
     * current connection.
     *
     * @returns The accounts addresses strings
     */
    accounts(): Promise<Array<string>>;
    /**
     * Should start the connection process and return
     * true if the account authorize the connection.
     *
     * and return false if the user reject the connection.
     *
     * @emits accounts
     * @returns boolean - connection status.
     */
    connect(): Promise<boolean>;
    /**
     * Should disconnect the current connection and
     * return false if the disconnection was successful.
     *
     * @emits assets connection
     * @returns The connection status.
     */
    disconnect(): Promise<boolean>;
    /**
     * Should start the sign message process and return
     * the signed message.
     *
     * @param address - The address to sign the message
     * @param message - The message to sign all text will be treated as text utf-8
     *
     * @returns Message signature
     */
    signMessage(_address: string, _message: string): Promise<string>;
    /**
     * Should start the sign transaction process and return
     * the signed transaction.
     *
     * @param address - The address to sign the transaction
     * @param transaction - The transaction to sign
     *
     * @returns Transaction signature
     */
    signTransaction(_address: string, _transaction: TransactionRequestLike): Promise<string>;
    /**
     * Should start the send transaction process and return
     * the transaction id submitted to the network.
     *
     * If the network is not available for the connection
     * it should throw an error to avoid the transaction
     * to be sent to the wrong network and lost.
     *
     * @param address - The address to sign the transaction
     * @param transaction - The transaction to send
     *
     * @returns The transaction id
     */
    sendTransaction(_address: string, _transaction: TransactionRequestLike): Promise<string>;
    /**
     * Should return the current account selected inside the connector, if the account
     * is authorized for the connection.
     *
     * If the account is not authorized it should return null.
     *
     * @returns The current account selected otherwise null.
     */
    currentAccount(): Promise<string | null>;
    /**
     * Should add the the assets metadata to the connector and return true if the asset
     * was added successfully.
     *
     * If the asset already exists it should throw an error.
     *
     * @emits assets
     * @param assets - The assets to add the metadata to the connection.
     * @throws Error if the asset already exists
     * @returns True if the asset was added successfully
     */
    addAssets(_assets: Array<Asset>): Promise<boolean>;
    /**
     * Should add the the asset metadata to the connector and return true if the asset
     * was added successfully.
     *
     * If the asset already exists it should throw an error.
     *
     * @emits assets
     * @param asset - The asset to add the metadata to the connection.
     * @throws Error if the asset already exists
     * @returns True if the asset was added successfully
     */
    addAsset(_asset: Asset): Promise<boolean>;
    /**
     * Should return all the assets added to the connector. If a connection is already established.
     *
     * @returns Array of assets metadata from the connector vinculated to the all accounts from a specific Wallet.
     */
    assets(): Promise<Array<Asset>>;
    /**
     * Should start the add network process and return true if the network was added successfully.
     *
     * @emits networks
     * @throws Error if the network already exists
     * @param networkUrl - The URL of the network to be added.
     * @returns Return true if the network was added successfully
     */
    addNetwork(_networkUrl: string): Promise<boolean>;
    /**
     * Should start the select network process and return true if the network has change successfully.
     *
     * @emits networks
     * @throws Error if the network already exists
     * @param network - The network to be selected.
     * @returns Return true if the network was added successfully
     */
    selectNetwork(_network: Network): Promise<boolean>;
    /**
     * Should return all the networks available from the connector. If the connection is already established.
     *
     * @returns Return all the networks added to the connector.
     */
    networks(): Promise<Array<Network>>;
    /**
     * Should return the current network selected inside the connector. Even if the connection is not established.
     *
     * @returns Return the current network selected inside the connector.
     */
    currentNetwork(): Promise<Network>;
    /**
     * Should add the ABI to the connector and return true if the ABI was added successfully.
     *
     * @param contractId - The contract id to add the ABI.
     * @param abi - The JSON ABI that represents a contract.
     * @returns Return true if the ABI was added successfully.
     */
    addABI(_contractId: string, _abi: FuelABI): Promise<boolean>;
    /**
     * Should return the ABI from the connector vinculated to the all accounts from a specific Wallet.
     *
     * @param id - The contract id to get the ABI.
     * @returns The ABI if it exists, otherwise return null.
     */
    getABI(_id: string): Promise<FuelABI | null>;
    /**
     * Should return true if the abi exists in the connector vinculated to the all accounts from a specific Wallet.
     *
     * @param id - The contract id to get the abi
     * @returns Returns true if the abi exists or false if not.
     */
    hasABI(_id: string): Promise<boolean>;
    /**
     * Event listener for the connector.
     *
     * @param eventName - The event name to listen
     * @param listener - The listener function
     */
    on<E extends FuelConnectorEvents['type'], D extends FuelEventArg<E>>(eventName: E, listener: (data: D) => void): this;
}
//# sourceMappingURL=fuel-connector.d.ts.map