import type { BytesLike } from '@fuel-ts/interfaces';
type HDWalletConfig = {
    privateKey?: BytesLike;
    publicKey?: BytesLike;
    chainCode: BytesLike;
    depth?: number;
    index?: number;
    parentFingerprint?: string;
};
declare class HDWallet {
    depth: number;
    index: number;
    fingerprint: string;
    parentFingerprint: string;
    privateKey?: string;
    publicKey: string;
    chainCode: BytesLike;
    /**
     * HDWallet is a implementation of the BIP-0044 and BIP-0032, Multi-Account Hierarchy for Deterministic Wallets
     *
     * @param config - Wallet configurations
     */
    constructor(config: HDWalletConfig);
    get extendedKey(): string;
    /**
     * Derive the current HDWallet instance navigating only on the index.
     * `Ex.: m/44'/0 -> Ex.: m/44'/1 -> m/44'/2`. [Learn more](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki)
     *
     * @param index - Index of the child HDWallet.
     * @returns A new instance of HDWallet on the derived index
     */
    deriveIndex(index: number): HDWallet;
    /**
     * Derive the current HDWallet instance to the path. [Learn more](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki)
     *
     * @param path - The string representation of the child HDWallet. `Ex.: m/44'/0'/0'/0/0`
     * @returns A new instance of HDWallet on the derived path
     */
    derivePath(path: string): HDWallet;
    /**
     * Get the extendKey as defined on BIP-32 from the provided seed
     *
     * @param isPublic - enable to export public extendedKey, it not required when HDWallet didn't have the privateKey.
     * @param testnet - Inform if should use testnet or mainnet prefix, default value is true (`mainnet`).
     * @returns BIP-32 extended private key
     */
    toExtendedKey(isPublic?: boolean, testnet?: boolean): string;
    /**
     * Create HDWallet instance from seed
     *
     * @param seed - Seed
     * @returns A new instance of HDWallet
     */
    static fromSeed(seed: string): HDWallet;
    static fromExtendedKey(extendedKey: string): HDWallet;
}
export default HDWallet;
//# sourceMappingURL=hdwallet.d.ts.map