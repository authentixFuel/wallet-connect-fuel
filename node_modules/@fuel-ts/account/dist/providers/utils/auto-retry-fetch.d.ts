import type { ProviderOptions } from '../provider';
type Backoff = 'linear' | 'exponential' | 'fixed';
/**
 * Retry options scheme
 */
export type RetryOptions = {
    /**
     * Amount of attempts to retry before failing the call.
     */
    maxRetries: number;
    /**
     * Backoff strategy to use when retrying. Default is exponential.
     */
    backoff?: Backoff;
    /**
     * Starting delay for backoff strategy. Default is 150ms.
     */
    baseDelay?: number;
};
/**
 * Calculate the delay for the next retry attempt
 * @param options - Retry options configuration
 * @param retryAttemptNum - 1-based, tells which retry attempt is this
 * @returns Next wait delay
 */
export declare function getWaitDelay(options: RetryOptions, retryAttemptNum: number): number;
/**
 * Returns a wrapped fetch function that will auto-execute itself in case of errors, until it succeeds
 * @param fetchFn - Function to be auto-retried
 * @param options - Retry options configuration
 * @param retryAttemptNum - ZERO=first call, ONE=first retry, TWO=second retry, etc.
 * @returns Whatever is the output of the `fetchFn` function
 */
export declare function autoRetryFetch(fetchFn: NonNullable<ProviderOptions['fetch']>, options?: RetryOptions, retryAttemptNum?: number): NonNullable<ProviderOptions['fetch']>;
export {};
//# sourceMappingURL=auto-retry-fetch.d.ts.map