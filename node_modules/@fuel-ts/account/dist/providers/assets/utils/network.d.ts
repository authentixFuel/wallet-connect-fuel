import type { Asset, AssetEth, AssetFuel, NetworkEthereum, NetworkFuel } from '../types';
type Network = NetworkEthereum | NetworkFuel;
export type NetworkTypes = NetworkEthereum['type'] | NetworkFuel['type'];
type NetworkTypeToNetwork<T> = T extends 'ethereum' ? NetworkEthereum : T extends 'fuel' ? NetworkFuel : Network;
/**
 * Returns the default chainId for the given network
*/
export declare const getDefaultChainId: (networkType: NetworkTypes) => number | undefined;
export type GetAssetNetworkParams<T extends NetworkTypes | undefined> = {
    asset: Asset;
    chainId?: number;
    networkType: T;
};
/**
 * Returns the asset's network on the given network
 * eg. getAssetNetwork({ asset, chainId: 1, networkType: 'ethereum' }) will return the asset's details on Ethereum mainnet
*/
export declare const getAssetNetwork: <T extends NetworkTypes | undefined>({ asset, chainId, networkType, }: GetAssetNetworkParams<T>) => NetworkTypeToNetwork<T>;
/**
 * Returns the asset's details on the given network alongwith the asset itself
 * eg. getAssetWithNetwork({ asset, chainId: 1, networkType: 'ethereum' }) will return the asset's details on Ethereum mainnet and the asset itself
*/
export declare const getAssetWithNetwork: <T extends NetworkTypes>({ asset, chainId, networkType, }: GetAssetNetworkParams<T>) => AssetEth | AssetFuel | undefined;
/**
 * Returns the asset's details on Ethereum
*/
export declare const getAssetEth: (asset: Asset, chainId?: number) => AssetEth | undefined;
/**
 * Returns the asset's details on Fuel
*/
export declare const getAssetFuel: (asset: Asset, chainId?: number) => AssetFuel | undefined;
export {};
//# sourceMappingURL=network.d.ts.map