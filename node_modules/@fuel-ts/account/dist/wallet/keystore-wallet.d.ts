import type { AbstractAddress } from '@fuel-ts/interfaces';
export type KeystoreWallet = {
    id: string;
    version: number;
    address: string;
    crypto: KeystoreCrypto;
};
type KeystoreCrypto = {
    cipher: 'aes-128-ctr';
    cipherparams: {
        iv: string;
    };
    ciphertext: string;
    kdf: 'scrypt';
    mac: string;
    kdfparams: KDFParams;
};
type KDFParams = {
    dklen: number;
    n: number;
    p: number;
    r: number;
    salt: string;
};
export declare const DEFAULT_KDF_PARAMS_LOG_N = 13;
export declare const DEFAULT_KDF_PARAMS_R = 8;
export declare const DEFAULT_KDF_PARAMS_P = 1;
export declare const DEFAULT_KEY_SIZE = 32;
export declare const DEFAULT_IV_SIZE = 16;
/**
 * Removes the '0x' prefix from a hexadecimal string.
 * If the prefix does not exist, it returns the original string.
 */
export declare const removeHexPrefix: (hexString: string) => string;
export declare function encryptKeystoreWallet(privateKey: string, address: string | AbstractAddress, password: string): Promise<string>;
export declare function decryptKeystoreWallet(jsonWallet: string, password: string): Promise<string>;
export {};
//# sourceMappingURL=keystore-wallet.d.ts.map