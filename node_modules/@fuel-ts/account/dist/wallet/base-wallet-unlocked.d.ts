import type { BytesLike } from '@fuel-ts/interfaces';
import { Account } from '../account';
import type { TransactionResponse, TransactionRequestLike, CallResult, Provider, ProviderSendTxParams, EstimateTransactionParams } from '../providers';
import { Signer } from '../signer';
/**
 * `BaseWalletUnlocked` provides the base functionalities for an unlocked wallet.
 */
export declare class BaseWalletUnlocked extends Account {
    /**
     * Default HDWallet path.
     */
    static defaultPath: string;
    /**
     * A function that returns the wallet's signer.
     */
    signer: () => Signer;
    /**
     * Creates a new BaseWalletUnlocked instance.
     *
     * @param privateKey - The private key of the wallet.
     * @param provider - A Provider instance (optional).
     */
    constructor(privateKey: BytesLike, provider?: Provider);
    /**
     * Gets the private key of the wallet.
     *
     * @returns The private key of the wallet.
     */
    get privateKey(): string;
    /**
     * Gets the public key of the wallet.
     *
     * @returns
     */
    get publicKey(): string;
    /**
     * Signs a message with the wallet's private key.
     *
     * @param message - The message to sign.
     * @returns A promise that resolves to the signature as a ECDSA 64 bytes string.
     */
    signMessage(message: string): Promise<string>;
    /**
     * Signs a transaction with the wallet's private key.
     *
     * @param transactionRequestLike - The transaction request to sign.
     * @returns A promise that resolves to the signature as a ECDSA 64 bytes string.
     */
    signTransaction(transactionRequestLike: TransactionRequestLike): Promise<string>;
    /**
     * Populates a transaction with the witnesses signature.
     *
     * @param transactionRequestLike - The transaction request to populate.
     * @returns The populated transaction request.
     */
    populateTransactionWitnessesSignature(transactionRequestLike: TransactionRequestLike): Promise<import("../providers").TransactionRequest>;
    /**
     * Populates the witness signature for a transaction and sends it to the network using `provider.sendTransaction`.
     *
     * @param transactionRequestLike - The transaction request to send.
     * @returns A promise that resolves to the TransactionResponse object.
     */
    sendTransaction(transactionRequestLike: TransactionRequestLike, { estimateTxDependencies, awaitExecution }?: ProviderSendTxParams): Promise<TransactionResponse>;
    /**
     * Populates the witness signature for a transaction and sends a call to the network using `provider.call`.
     *
     * @param transactionRequestLike - The transaction request to simulate.
     * @returns A promise that resolves to the CallResult object.
     */
    simulateTransaction(transactionRequestLike: TransactionRequestLike, { estimateTxDependencies }?: EstimateTransactionParams): Promise<CallResult>;
    encrypt(password: string): Promise<string>;
}
//# sourceMappingURL=base-wallet-unlocked.d.ts.map