// src/test-utils/getForcProject.ts
import { existsSync, readFileSync } from "fs";
import { join } from "path";

// src/utils/arrayify.ts
import { FuelError, ErrorCode } from "@fuel-ts/errors";
var arrayify = (value) => {
  if (value instanceof Uint8Array) {
    return new Uint8Array(value);
  }
  if (typeof value === "string" && value.match(/^0x([0-9a-f][0-9a-f])*$/i)) {
    const result = new Uint8Array((value.length - 2) / 2);
    let offset = 2;
    for (let i = 0; i < result.length; i++) {
      result[i] = parseInt(value.substring(offset, offset + 2), 16);
      offset += 2;
    }
    return result;
  }
  throw new FuelError(ErrorCode.PARSE_FAILED, "invalid BytesLike value");
};

// src/utils/hexlify.ts
var HexCharacters = "0123456789abcdef";
function hexlify(data) {
  const bytes = arrayify(data);
  let result = "0x";
  for (let i = 0; i < bytes.length; i++) {
    const v = bytes[i];
    result += HexCharacters[(v & 240) >> 4] + HexCharacters[v & 15];
  }
  return result;
}

// src/utils/normalizeString.ts
import { ErrorCode as ErrorCode2, FuelError as FuelError2 } from "@fuel-ts/errors";
var normalizeString = (str) => {
  const transformations = [
    (s) => s.replace(/\s+/g, "-"),
    // spaces to -
    (s) => s.replace(/\./g, "-"),
    // dots to -
    (s) => s.replace(/_/g, "-"),
    // underscore to -
    (s) => s.replace(/-[a-z]/g, (match) => match.slice(-1).toUpperCase()),
    // delete '-' and capitalize the letter after them
    (s) => s.replace(/-/g, ""),
    // delete any '-' left
    (s) => s.replace(/^\d+/, ""),
    // removes leading digits
    (s) => s[0].toUpperCase() + s.slice(1)
    // capitalize first letter
  ];
  const output = transformations.reduce((s, t) => t(s), str);
  if (output === "") {
    const errMsg = `The provided string '${str}' results in an empty output after`.concat(
      ` normalization, therefore, it can't normalize string.`
    );
    throw new FuelError2(ErrorCode2.PARSE_FAILED, errMsg);
  }
  return output;
};

// src/utils/date-time.ts
var TAI64_LEAP_SECONDS = 37;
var TAI64_UNIX_OFFSET = BigInt(2 ** 62) + BigInt(TAI64_LEAP_SECONDS);

// src/test-utils/getForcProject.ts
var getProjectBuildDir = (params) => join(params.projectDir, "out", params.build);
var getProjectReleaseDir = (params) => join(params.projectDir, "out", params.build);
var getProjectTempDir = (params) => join(getProjectBuildDir(params), "__temp__");
var getProjectAbiPath = (params) => join(getProjectBuildDir(params), `${params.projectName}-abi.json`);
var getProjectBinPath = (params) => join(getProjectBuildDir(params), `${params.projectName}.bin`);
var getProjectStorageSlotsPath = (params) => join(getProjectBuildDir(params), `${params.projectName}-storage_slots.json`);
var getProjectAbiName = (params) => `${params.projectName}-abi`;
var getProjectNormalizedName = (params) => normalizeString(params.projectName);
var getProjectAbi = (params) => {
  const projectPath = getProjectAbiPath(params);
  const abiContents = JSON.parse(readFileSync(projectPath, "utf-8"));
  return abiContents;
};
var getProjectStorageSlots = (params) => {
  const storageSlotsFilePath = getProjectStorageSlotsPath(params);
  if (!existsSync(storageSlotsFilePath)) {
    return [];
  }
  const storageSlots = JSON.parse(readFileSync(storageSlotsFilePath, "utf-8"));
  return storageSlots;
};
var getForcProject = (params) => {
  const buildDir = getProjectBuildDir(params);
  const tempDir = getProjectTempDir(params);
  const binPath = getProjectBinPath(params);
  const binHexlified = hexlify(readFileSync(binPath));
  const abiPath = getProjectAbiPath(params);
  const abiName = getProjectAbiName(params);
  const abiContents = getProjectAbi(params);
  const normalizedName = getProjectNormalizedName(params);
  const storageSlots = getProjectStorageSlots(params);
  const inputGlobal = `${buildDir}/*-abi.json`;
  return {
    name: params.projectName,
    storageSlots,
    normalizedName,
    buildDir,
    tempDir,
    binPath,
    binHexlified,
    abiPath,
    abiName,
    abiContents,
    inputGlobal
  };
};

// src/test-utils/expectToBeInRange.ts
var expectToBeInRange = (params) => {
  const { value, min, max } = params;
  if (value >= min && value <= max) {
    return true;
  }
  throw new Error(`Expected value: '${value}' to be within range: '${min}-${max}'`);
};

// src/test-utils/constants.ts
var ASSET_A = "0x0101010101010101010101010101010101010101010101010101010101010101";
var ASSET_B = "0x0202020202020202020202020202020202020202020202020202020202020202";
export {
  ASSET_A,
  ASSET_B,
  expectToBeInRange,
  getForcProject,
  getProjectAbi,
  getProjectAbiName,
  getProjectAbiPath,
  getProjectBinPath,
  getProjectBuildDir,
  getProjectNormalizedName,
  getProjectReleaseDir,
  getProjectStorageSlots,
  getProjectStorageSlotsPath,
  getProjectTempDir
};
//# sourceMappingURL=test-utils.mjs.map