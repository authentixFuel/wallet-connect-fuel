/**
 * Tai64 timestamp.
 */
type Tai64Timestamp = string;
/**
 * This class is used to represent a date and time in the Tai64 format.
 *
 * ```typescript
 * import { DateTime } from 'fuels';
 *
 * // Constants
 * const tai64 = '4611686020108779340';
 * const unixMilliseconds = 1681391398000;
 * const seconds = 1681391398;
 *
 * // Instantiation
 * let date: DateTime = DateTime.now();
 * date = DateTime.fromTai64(tai64);
 * date = DateTime.fromUnixMilliseconds(unixMilliseconds);
 * date = DateTime.fromUnixSeconds(seconds);
 *
 * // Utility functions
 * tai64.toTai64() // '4611686020108779340'
 * milliseconds.toUnixMilliseconds() // 1681391398000
 * seconds.toUnixSeconds() // 1681391398
 *
 * // All date methods are available
 * const now: Date = DateTime.now();
 * now.toISOString(); // '2023-04-13T13:09:58.000Z'
 * now.getTime(); // 1681391398000
 * ```
 */
export declare class DateTime extends Date implements Date {
    static TAI64_NULL: Tai64Timestamp;
    /**
     * Generates a new DateTime instance from a Tai64 timestamp.
     *
     * @param tai64 - Tai64 timestamp
     * @returns a new DateTime instance
     */
    static fromTai64(tai64: Tai64Timestamp): DateTime;
    /**
     * @param unixMilliseconds - unix milliseconds timestamp
     * @returns a new DateTime instance
     */
    static fromUnixMilliseconds(unixMilliseconds: number): DateTime;
    /**
     * @param unixSeconds - unix seconds timestamp
     * @returns a new DateTime instance
     */
    static fromUnixSeconds(unixSeconds: number): DateTime;
    /**
     * Hide the constructor to prevent direct instantiation.
     */
    private constructor();
    /**
     * Returns the Tai64 timestamp.
     *
     * @returns the Tai64 timestamp
     */
    toTai64(): Tai64Timestamp;
    /**
     * @returns the unix milliseconds timestamp
     */
    toUnixMilliseconds(): number;
    /**
     * @returns the unix seconds timestamp
     */
    toUnixSeconds(): number;
}
export {};
//# sourceMappingURL=date-time.d.ts.map