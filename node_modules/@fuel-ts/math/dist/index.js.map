{"version":3,"sources":["../src/index.ts","../src/bn.ts","../src/configs.ts","../src/decimal.ts","../src/functional.ts","../src/math.ts"],"sourcesContent":["export * from './bn';\nexport * from './decimal';\nexport * from './functional';\nexport * from './math';\nexport * from './types';\n","import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport BnJs from 'bn.js';\n\nimport { DECIMAL_UNITS, DEFAULT_MIN_PRECISION, DEFAULT_PRECISION } from './configs';\nimport { toFixed } from './decimal';\nimport type { FormatConfig } from './types';\n\ntype CompareResult = -1 | 0 | 1;\nexport type BNInput = number | string | number[] | Uint8Array | Buffer | BnJs;\n\ninterface BNHelper {\n  caller(v: BNInput, methodName: string): BN | boolean | CompareResult;\n  toHex: (bytesPadding?: number) => string;\n  toBytes: (bytesPadding?: number) => Uint8Array;\n  toJSON: () => string;\n}\ninterface BNInputOverrides {\n  add: (v: BNInput) => BN;\n  pow: (v: BNInput) => BN;\n  sub: (v: BNInput) => BN;\n  div: (v: BNInput) => BN;\n  mul: (v: BNInput) => BN;\n  mod: (v: BNInput) => BN;\n  divRound: (v: BNInput) => BN;\n  lt: (v: BNInput) => boolean;\n  lte: (v: BNInput) => boolean;\n  gt: (v: BNInput) => boolean;\n  gte: (v: BNInput) => boolean;\n  eq: (v: BNInput) => boolean;\n  cmp: (v: BNInput) => CompareResult;\n}\ninterface BNOverrides {\n  sqr: () => BN;\n  neg: () => BN;\n  abs: () => BN;\n  toTwos: (width: number) => BN;\n  fromTwos: (width: number) => BN;\n}\ninterface BNHiddenTypes {\n  mulTo: (num: BN, out: BN) => BN;\n  divmod: (num: BNInput, mode?: string, positive?: boolean) => { mod: BN; div: BN };\n}\ntype BNInputOverridesKeys = keyof BNInputOverrides;\n\nexport class BN extends BnJs implements BNInputOverrides, BNHiddenTypes, BNHelper, BNOverrides {\n  MAX_U64 = '0xFFFFFFFFFFFFFFFF';\n\n  constructor(value?: BNInput | null, base?: number | 'hex', endian?: BnJs.Endianness) {\n    let bnValue = value;\n    let bnBase = base;\n\n    if (BN.isBN(value)) {\n      bnValue = value.toArray();\n    }\n    // trim '0x' from hex strings as BN doesn't support it - https://github.com/ChainSafe/web3.js/issues/3847\n    else if (typeof value === 'string' && value.slice(0, 2) === '0x') {\n      bnValue = value.substring(2);\n      bnBase = base || 'hex';\n    }\n\n    super(bnValue == null ? 0 : bnValue, bnBase, endian);\n  }\n\n  // ANCHOR: HELPERS\n  // make sure we always include `0x` in hex strings\n  toString(base?: number | 'hex', length?: number) {\n    const output = super.toString(base, length);\n\n    if (base === 16 || base === 'hex') {\n      return `0x${output}`;\n    }\n\n    return output;\n  }\n\n  toHex(bytesPadding?: number): string {\n    const bytes = bytesPadding || 0;\n    const bytesLength = bytes * 2;\n\n    if (this.isNeg()) {\n      throw new FuelError(ErrorCode.CONVERTING_FAILED, 'Cannot convert negative value to hex.');\n    }\n    if (bytesPadding && this.byteLength() > bytesPadding) {\n      throw new FuelError(\n        ErrorCode.CONVERTING_FAILED,\n        `Provided value ${this} is too large. It should fit within ${bytesPadding} bytes.`\n      );\n    }\n\n    return this.toString(16, bytesLength);\n  }\n\n  toBytes(bytesPadding?: number): Uint8Array {\n    if (this.isNeg()) {\n      throw new FuelError(ErrorCode.CONVERTING_FAILED, 'Cannot convert negative value to bytes.');\n    }\n\n    return Uint8Array.from(this.toArray(undefined, bytesPadding));\n  }\n\n  toJSON(): string {\n    return this.toString(16);\n  }\n\n  valueOf(): string {\n    return this.toString();\n  }\n\n  format(options?: FormatConfig): string {\n    const {\n      units = DECIMAL_UNITS,\n      precision = DEFAULT_PRECISION,\n      minPrecision = DEFAULT_MIN_PRECISION,\n    } = options || {};\n\n    const formattedUnits = this.formatUnits(units);\n    const formattedFixed = toFixed(formattedUnits, { precision, minPrecision });\n\n    // increase precision if formatted is zero, but has more numbers out of precision\n    if (!parseFloat(formattedFixed)) {\n      const [, originalDecimals = '0'] = formattedUnits.split('.');\n      const firstNonZero = originalDecimals.match(/[1-9]/);\n\n      if (firstNonZero && firstNonZero.index && firstNonZero.index + 1 > precision) {\n        const [valueUnits = '0'] = formattedFixed.split('.');\n        return `${valueUnits}.${originalDecimals.slice(0, firstNonZero.index + 1)}`;\n      }\n    }\n\n    return formattedFixed;\n  }\n\n  formatUnits(units: number = DECIMAL_UNITS): string {\n    const valueUnits = this.toString().slice(0, units * -1);\n    const valueDecimals = this.toString().slice(units * -1);\n    const length = valueDecimals.length;\n    const defaultDecimals = Array.from({ length: units - length })\n      .fill('0')\n      .join('');\n    const integerPortion = valueUnits ? `${valueUnits}.` : '0.';\n\n    return `${integerPortion}${defaultDecimals}${valueDecimals}`;\n  }\n  // END ANCHOR: HELPERS\n\n  // ANCHOR: OVERRIDES to accept better inputs\n  add(v: BNInput): BN {\n    return this.caller(v, 'add') as BN;\n  }\n\n  pow(v: BNInput): BN {\n    return this.caller(v, 'pow') as BN;\n  }\n\n  sub(v: BNInput): BN {\n    return this.caller(v, 'sub') as BN;\n  }\n\n  div(v: BNInput): BN {\n    return this.caller(v, 'div') as BN;\n  }\n\n  mul(v: BNInput): BN {\n    return this.caller(v, 'mul') as BN;\n  }\n\n  mod(v: BNInput): BN {\n    return this.caller(v, 'mod') as BN;\n  }\n\n  divRound(v: BNInput): BN {\n    return this.caller(v, 'divRound') as BN;\n  }\n\n  lt(v: BNInput): boolean {\n    return this.caller(v, 'lt') as boolean;\n  }\n\n  lte(v: BNInput): boolean {\n    return this.caller(v, 'lte') as boolean;\n  }\n\n  gt(v: BNInput): boolean {\n    return this.caller(v, 'gt') as boolean;\n  }\n\n  gte(v: BNInput): boolean {\n    return this.caller(v, 'gte') as boolean;\n  }\n\n  eq(v: BNInput): boolean {\n    return this.caller(v, 'eq') as boolean;\n  }\n\n  cmp(v: BNInput): CompareResult {\n    return this.caller(v, 'cmp') as CompareResult;\n  }\n  // END ANCHOR: OVERRIDES to accept better inputs\n\n  // ANCHOR: OVERRIDES to output our BN type\n  sqr(): BN {\n    return new BN(super.sqr().toArray());\n  }\n\n  neg(): BN {\n    return new BN(super.neg().toArray());\n  }\n\n  abs(): BN {\n    return new BN(super.abs().toArray());\n  }\n\n  toTwos(width: number): BN {\n    return new BN(super.toTwos(width).toArray());\n  }\n\n  fromTwos(width: number): BN {\n    return new BN(super.fromTwos(width).toArray());\n  }\n  // END ANCHOR: OVERRIDES to output our BN type\n\n  // ANCHOR: OVERRIDES to avoid losing references\n  caller(v: BNInput, methodName: BNInputOverridesKeys): BN | boolean | CompareResult {\n    const output = super[methodName](new BN(v));\n\n    if (BN.isBN(output)) {\n      return new BN(output.toArray());\n    }\n\n    if (typeof output === 'boolean') {\n      return output as boolean;\n    }\n\n    return output as CompareResult;\n  }\n\n  clone() {\n    return new BN(this.toArray());\n  }\n\n  mulTo(num: BN, out: BN) {\n    const output: BnJs = (new BnJs(this.toArray()) as BN).mulTo(num, out);\n\n    return new BN(output.toArray());\n  }\n\n  egcd(p: BnJs) {\n    const { a, b, gcd } = new BnJs(this.toArray()).egcd(p);\n\n    return {\n      a: new BN(a.toArray()),\n      b: new BN(b.toArray()),\n      gcd: new BN(gcd.toArray()),\n    };\n  }\n\n  divmod(num: BNInput, mode?: string, positive?: boolean): { mod: BN; div: BN } {\n    const { div, mod } = (new BnJs(this.toArray()) as BN).divmod(new BN(num), mode, positive);\n\n    return {\n      div: new BN(div?.toArray()),\n      mod: new BN(mod?.toArray()),\n    };\n  }\n\n  maxU64(): BN {\n    return this.gte(this.MAX_U64) ? new BN(this.MAX_U64) : this;\n  }\n\n  normalizeZeroToOne(): BN {\n    return this.isZero() ? new BN(1) : this;\n  }\n  // END ANCHOR: OVERRIDES to avoid losing references\n}\n\n// functional shortcut to create BN\nexport const bn = (value?: BNInput | null, base?: number | 'hex', endian?: BnJs.Endianness) =>\n  new BN(value, base, endian);\n\nbn.parseUnits = (value: string, units: number = DECIMAL_UNITS): BN => {\n  const valueToParse = value === '.' ? '0.' : value;\n  const [valueUnits = '0', valueDecimals = '0'] = valueToParse.split('.');\n  const length = valueDecimals.length;\n\n  if (length > units) {\n    throw new FuelError(\n      ErrorCode.CONVERTING_FAILED,\n      `Decimal can't have more than ${units} digits.`\n    );\n  }\n\n  const decimals = Array.from({ length: units }).fill('0');\n  decimals.splice(0, length, valueDecimals);\n  const amount = `${valueUnits.replaceAll(',', '')}${decimals.join('')}`;\n  return bn(amount);\n};\n","export const DEFAULT_PRECISION = 9;\nexport const DEFAULT_MIN_PRECISION = 3;\nexport const DECIMAL_UNITS = 9;\n","import { DEFAULT_PRECISION, DEFAULT_MIN_PRECISION } from './configs';\nimport type { ToFixedConfig } from './types';\n\nexport function toFixed(value?: string | number, options?: ToFixedConfig) {\n  const { precision = DEFAULT_PRECISION, minPrecision = DEFAULT_MIN_PRECISION } = options || {};\n\n  const [valueUnits = '0', valueDecimals = '0'] = String(value || '0.0').split('.');\n  const groupRegex = /(\\d)(?=(\\d{3})+\\b)/g;\n  const units = valueUnits.replace(groupRegex, '$1,');\n  let decimals = valueDecimals.slice(0, precision);\n\n  // strip traling zeros limited by minPrecision\n  if (minPrecision < precision) {\n    const trimmedDecimal = decimals.match(/.*[1-9]{1}/);\n    const lastNonZeroIndex = trimmedDecimal?.[0].length || 0;\n    const keepChars = Math.max(minPrecision, lastNonZeroIndex);\n    decimals = decimals.slice(0, keepChars);\n  }\n\n  const decimalPortion = decimals ? `.${decimals}` : '';\n  return `${units}${decimalPortion}`;\n}\n","import type { BNInput } from './bn';\nimport { bn } from './bn';\nimport type { FormatConfig } from './types';\n\n/**\n * Functional shortcuts\n */\n\n// Shortcut to bn(value).toNumber\nexport function toNumber(value: BNInput): number {\n  return bn(value).toNumber();\n}\n\n// Shortcut to bn(value).toHex\nexport function toHex(value: BNInput, bytesPadding?: number): string {\n  return bn(value).toHex(bytesPadding);\n}\n\n// Shortcut to bn(value).toBytes\nexport function toBytes(value: BNInput, bytesPadding?: number): Uint8Array {\n  return bn(value).toBytes(bytesPadding);\n}\n\n// Shortcut to bn.(value).formatUnits\nexport function formatUnits(value: BNInput, units?: number): string {\n  return bn(value).formatUnits(units);\n}\n\n// Shortcut to bn.(value).format\nexport function format(value: BNInput, options?: FormatConfig): string {\n  return bn(value).format(options);\n}\n","import type { BN } from './bn';\nimport { bn } from './bn';\nimport type { BigNumberish } from './types';\n\nexport function max(...numbers: Array<BigNumberish>): BN {\n  return numbers.reduce<BN>((prev, cur) => (bn(cur).gt(prev) ? bn(cur) : prev), bn(0));\n}\n\nexport function multiply(...numbers: Array<BigNumberish>): BN {\n  return bn(Math.ceil(numbers.reduce<BN>((a, b) => bn(a).mul(b), bn(1)).toNumber()));\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,oBAAqC;AACrC,gBAAiB;;;ACDV,IAAM,oBAAoB;AAC1B,IAAM,wBAAwB;AAC9B,IAAM,gBAAgB;;;ACCtB,SAAS,QAAQ,OAAyB,SAAyB;AACxE,QAAM,EAAE,YAAY,mBAAmB,eAAe,sBAAsB,IAAI,WAAW,CAAC;AAE5F,QAAM,CAAC,aAAa,KAAK,gBAAgB,GAAG,IAAI,OAAO,SAAS,KAAK,EAAE,MAAM,GAAG;AAChF,QAAM,aAAa;AACnB,QAAM,QAAQ,WAAW,QAAQ,YAAY,KAAK;AAClD,MAAI,WAAW,cAAc,MAAM,GAAG,SAAS;AAG/C,MAAI,eAAe,WAAW;AAC5B,UAAM,iBAAiB,SAAS,MAAM,YAAY;AAClD,UAAM,mBAAmB,iBAAiB,CAAC,EAAE,UAAU;AACvD,UAAM,YAAY,KAAK,IAAI,cAAc,gBAAgB;AACzD,eAAW,SAAS,MAAM,GAAG,SAAS;AAAA,EACxC;AAEA,QAAM,iBAAiB,WAAW,IAAI,aAAa;AACnD,SAAO,GAAG,QAAQ;AACpB;;;AFuBO,IAAM,KAAN,cAAiB,UAAAA,QAAuE;AAAA,EAC7F,UAAU;AAAA,EAEV,YAAY,OAAwB,MAAuB,QAA0B;AACnF,QAAI,UAAU;AACd,QAAI,SAAS;AAEb,QAAI,GAAG,KAAK,KAAK,GAAG;AAClB,gBAAU,MAAM,QAAQ;AAAA,IAC1B,WAES,OAAO,UAAU,YAAY,MAAM,MAAM,GAAG,CAAC,MAAM,MAAM;AAChE,gBAAU,MAAM,UAAU,CAAC;AAC3B,eAAS,QAAQ;AAAA,IACnB;AAEA,UAAM,WAAW,OAAO,IAAI,SAAS,QAAQ,MAAM;AAAA,EACrD;AAAA;AAAA;AAAA,EAIA,SAAS,MAAuB,QAAiB;AAC/C,UAAM,SAAS,MAAM,SAAS,MAAM,MAAM;AAE1C,QAAI,SAAS,MAAM,SAAS,OAAO;AACjC,aAAO,KAAK;AAAA,IACd;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,cAA+B;AACnC,UAAM,QAAQ,gBAAgB;AAC9B,UAAM,cAAc,QAAQ;AAE5B,QAAI,KAAK,MAAM,GAAG;AAChB,YAAM,IAAI,wBAAU,wBAAU,mBAAmB,uCAAuC;AAAA,IAC1F;AACA,QAAI,gBAAgB,KAAK,WAAW,IAAI,cAAc;AACpD,YAAM,IAAI;AAAA,QACR,wBAAU;AAAA,QACV,kBAAkB,2CAA2C;AAAA,MAC/D;AAAA,IACF;AAEA,WAAO,KAAK,SAAS,IAAI,WAAW;AAAA,EACtC;AAAA,EAEA,QAAQ,cAAmC;AACzC,QAAI,KAAK,MAAM,GAAG;AAChB,YAAM,IAAI,wBAAU,wBAAU,mBAAmB,yCAAyC;AAAA,IAC5F;AAEA,WAAO,WAAW,KAAK,KAAK,QAAQ,QAAW,YAAY,CAAC;AAAA,EAC9D;AAAA,EAEA,SAAiB;AACf,WAAO,KAAK,SAAS,EAAE;AAAA,EACzB;AAAA,EAEA,UAAkB;AAChB,WAAO,KAAK,SAAS;AAAA,EACvB;AAAA,EAEA,OAAO,SAAgC;AACrC,UAAM;AAAA,MACJ,QAAQ;AAAA,MACR,YAAY;AAAA,MACZ,eAAe;AAAA,IACjB,IAAI,WAAW,CAAC;AAEhB,UAAM,iBAAiB,KAAK,YAAY,KAAK;AAC7C,UAAM,iBAAiB,QAAQ,gBAAgB,EAAE,WAAW,aAAa,CAAC;AAG1E,QAAI,CAAC,WAAW,cAAc,GAAG;AAC/B,YAAM,CAAC,EAAE,mBAAmB,GAAG,IAAI,eAAe,MAAM,GAAG;AAC3D,YAAM,eAAe,iBAAiB,MAAM,OAAO;AAEnD,UAAI,gBAAgB,aAAa,SAAS,aAAa,QAAQ,IAAI,WAAW;AAC5E,cAAM,CAAC,aAAa,GAAG,IAAI,eAAe,MAAM,GAAG;AACnD,eAAO,GAAG,cAAc,iBAAiB,MAAM,GAAG,aAAa,QAAQ,CAAC;AAAA,MAC1E;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,YAAY,QAAgB,eAAuB;AACjD,UAAM,aAAa,KAAK,SAAS,EAAE,MAAM,GAAG,QAAQ,EAAE;AACtD,UAAM,gBAAgB,KAAK,SAAS,EAAE,MAAM,QAAQ,EAAE;AACtD,UAAM,SAAS,cAAc;AAC7B,UAAM,kBAAkB,MAAM,KAAK,EAAE,QAAQ,QAAQ,OAAO,CAAC,EAC1D,KAAK,GAAG,EACR,KAAK,EAAE;AACV,UAAM,iBAAiB,aAAa,GAAG,gBAAgB;AAEvD,WAAO,GAAG,iBAAiB,kBAAkB;AAAA,EAC/C;AAAA;AAAA;AAAA,EAIA,IAAI,GAAgB;AAClB,WAAO,KAAK,OAAO,GAAG,KAAK;AAAA,EAC7B;AAAA,EAEA,IAAI,GAAgB;AAClB,WAAO,KAAK,OAAO,GAAG,KAAK;AAAA,EAC7B;AAAA,EAEA,IAAI,GAAgB;AAClB,WAAO,KAAK,OAAO,GAAG,KAAK;AAAA,EAC7B;AAAA,EAEA,IAAI,GAAgB;AAClB,WAAO,KAAK,OAAO,GAAG,KAAK;AAAA,EAC7B;AAAA,EAEA,IAAI,GAAgB;AAClB,WAAO,KAAK,OAAO,GAAG,KAAK;AAAA,EAC7B;AAAA,EAEA,IAAI,GAAgB;AAClB,WAAO,KAAK,OAAO,GAAG,KAAK;AAAA,EAC7B;AAAA,EAEA,SAAS,GAAgB;AACvB,WAAO,KAAK,OAAO,GAAG,UAAU;AAAA,EAClC;AAAA,EAEA,GAAG,GAAqB;AACtB,WAAO,KAAK,OAAO,GAAG,IAAI;AAAA,EAC5B;AAAA,EAEA,IAAI,GAAqB;AACvB,WAAO,KAAK,OAAO,GAAG,KAAK;AAAA,EAC7B;AAAA,EAEA,GAAG,GAAqB;AACtB,WAAO,KAAK,OAAO,GAAG,IAAI;AAAA,EAC5B;AAAA,EAEA,IAAI,GAAqB;AACvB,WAAO,KAAK,OAAO,GAAG,KAAK;AAAA,EAC7B;AAAA,EAEA,GAAG,GAAqB;AACtB,WAAO,KAAK,OAAO,GAAG,IAAI;AAAA,EAC5B;AAAA,EAEA,IAAI,GAA2B;AAC7B,WAAO,KAAK,OAAO,GAAG,KAAK;AAAA,EAC7B;AAAA;AAAA;AAAA,EAIA,MAAU;AACR,WAAO,IAAI,GAAG,MAAM,IAAI,EAAE,QAAQ,CAAC;AAAA,EACrC;AAAA,EAEA,MAAU;AACR,WAAO,IAAI,GAAG,MAAM,IAAI,EAAE,QAAQ,CAAC;AAAA,EACrC;AAAA,EAEA,MAAU;AACR,WAAO,IAAI,GAAG,MAAM,IAAI,EAAE,QAAQ,CAAC;AAAA,EACrC;AAAA,EAEA,OAAO,OAAmB;AACxB,WAAO,IAAI,GAAG,MAAM,OAAO,KAAK,EAAE,QAAQ,CAAC;AAAA,EAC7C;AAAA,EAEA,SAAS,OAAmB;AAC1B,WAAO,IAAI,GAAG,MAAM,SAAS,KAAK,EAAE,QAAQ,CAAC;AAAA,EAC/C;AAAA;AAAA;AAAA,EAIA,OAAO,GAAY,YAAgE;AACjF,UAAM,SAAS,MAAM,UAAU,EAAE,IAAI,GAAG,CAAC,CAAC;AAE1C,QAAI,GAAG,KAAK,MAAM,GAAG;AACnB,aAAO,IAAI,GAAG,OAAO,QAAQ,CAAC;AAAA,IAChC;AAEA,QAAI,OAAO,WAAW,WAAW;AAC/B,aAAO;AAAA,IACT;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,QAAQ;AACN,WAAO,IAAI,GAAG,KAAK,QAAQ,CAAC;AAAA,EAC9B;AAAA,EAEA,MAAM,KAAS,KAAS;AACtB,UAAM,SAAgB,IAAI,UAAAA,QAAK,KAAK,QAAQ,CAAC,EAAS,MAAM,KAAK,GAAG;AAEpE,WAAO,IAAI,GAAG,OAAO,QAAQ,CAAC;AAAA,EAChC;AAAA,EAEA,KAAK,GAAS;AACZ,UAAM,EAAE,GAAG,GAAG,IAAI,IAAI,IAAI,UAAAA,QAAK,KAAK,QAAQ,CAAC,EAAE,KAAK,CAAC;AAErD,WAAO;AAAA,MACL,GAAG,IAAI,GAAG,EAAE,QAAQ,CAAC;AAAA,MACrB,GAAG,IAAI,GAAG,EAAE,QAAQ,CAAC;AAAA,MACrB,KAAK,IAAI,GAAG,IAAI,QAAQ,CAAC;AAAA,IAC3B;AAAA,EACF;AAAA,EAEA,OAAO,KAAc,MAAe,UAA0C;AAC5E,UAAM,EAAE,KAAK,IAAI,IAAK,IAAI,UAAAA,QAAK,KAAK,QAAQ,CAAC,EAAS,OAAO,IAAI,GAAG,GAAG,GAAG,MAAM,QAAQ;AAExF,WAAO;AAAA,MACL,KAAK,IAAI,GAAG,KAAK,QAAQ,CAAC;AAAA,MAC1B,KAAK,IAAI,GAAG,KAAK,QAAQ,CAAC;AAAA,IAC5B;AAAA,EACF;AAAA,EAEA,SAAa;AACX,WAAO,KAAK,IAAI,KAAK,OAAO,IAAI,IAAI,GAAG,KAAK,OAAO,IAAI;AAAA,EACzD;AAAA,EAEA,qBAAyB;AACvB,WAAO,KAAK,OAAO,IAAI,IAAI,GAAG,CAAC,IAAI;AAAA,EACrC;AAAA;AAEF;AAGO,IAAM,KAAK,CAAC,OAAwB,MAAuB,WAChE,IAAI,GAAG,OAAO,MAAM,MAAM;AAE5B,GAAG,aAAa,CAAC,OAAe,QAAgB,kBAAsB;AACpE,QAAM,eAAe,UAAU,MAAM,OAAO;AAC5C,QAAM,CAAC,aAAa,KAAK,gBAAgB,GAAG,IAAI,aAAa,MAAM,GAAG;AACtE,QAAM,SAAS,cAAc;AAE7B,MAAI,SAAS,OAAO;AAClB,UAAM,IAAI;AAAA,MACR,wBAAU;AAAA,MACV,gCAAgC;AAAA,IAClC;AAAA,EACF;AAEA,QAAM,WAAW,MAAM,KAAK,EAAE,QAAQ,MAAM,CAAC,EAAE,KAAK,GAAG;AACvD,WAAS,OAAO,GAAG,QAAQ,aAAa;AACxC,QAAM,SAAS,GAAG,WAAW,WAAW,KAAK,EAAE,IAAI,SAAS,KAAK,EAAE;AACnE,SAAO,GAAG,MAAM;AAClB;;;AG9RO,SAAS,SAAS,OAAwB;AAC/C,SAAO,GAAG,KAAK,EAAE,SAAS;AAC5B;AAGO,SAAS,MAAM,OAAgB,cAA+B;AACnE,SAAO,GAAG,KAAK,EAAE,MAAM,YAAY;AACrC;AAGO,SAAS,QAAQ,OAAgB,cAAmC;AACzE,SAAO,GAAG,KAAK,EAAE,QAAQ,YAAY;AACvC;AAGO,SAAS,YAAY,OAAgB,OAAwB;AAClE,SAAO,GAAG,KAAK,EAAE,YAAY,KAAK;AACpC;AAGO,SAAS,OAAO,OAAgB,SAAgC;AACrE,SAAO,GAAG,KAAK,EAAE,OAAO,OAAO;AACjC;;;AC3BO,SAAS,OAAO,SAAkC;AACvD,SAAO,QAAQ,OAAW,CAAC,MAAM,QAAS,GAAG,GAAG,EAAE,GAAG,IAAI,IAAI,GAAG,GAAG,IAAI,MAAO,GAAG,CAAC,CAAC;AACrF;AAEO,SAAS,YAAY,SAAkC;AAC5D,SAAO,GAAG,KAAK,KAAK,QAAQ,OAAW,CAAC,GAAG,MAAM,GAAG,CAAC,EAAE,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC;AACnF;","names":["BnJs"]}