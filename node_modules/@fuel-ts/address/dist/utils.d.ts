import type { Bech32Address, B256Address, AddressLike, ContractIdLike, AbstractAddress, B256AddressEvm, BytesLike } from '@fuel-ts/interfaces';
import type { Decoded } from 'bech32';
/**
 * Fuel Network HRP (human-readable part) for bech32 encoding
 *
 * @hidden
 */
export declare const FUEL_BECH32_HRP_PREFIX = "fuel";
/**
 * Decodes a Bech32 address string into Decoded
 *
 * @hidden
 */
export declare function fromBech32(address: Bech32Address): Decoded;
/**
 * Converts a B256 address string into Bech32
 *
 * @hidden
 */
export declare function toBech32(address: B256Address): Bech32Address;
/**
 * Determines if a given string is Bech32 format
 *
 * @hidden
 */
export declare function isBech32(address: BytesLike): boolean;
/**
 * Determines if a given string is B256 format
 *
 * @hidden
 */
export declare function isB256(address: string): boolean;
/**
 * Determines if a given string is in Public Key format (512 bits)
 *
 * @hidden
 */
export declare function isPublicKey(address: string): boolean;
/**
 * Determines if a given string is in EVM Address format
 *
 * @hidden
 */
export declare function isEvmAddress(address: string): boolean;
/**
 * Takes a Bech32 address and returns the byte data
 *
 * @hidden
 */
export declare function getBytesFromBech32(address: Bech32Address): Uint8Array;
/**
 * Converts a Bech32 address string into B256
 *
 * @hidden
 */
export declare function toB256(address: Bech32Address): B256Address;
/**
 * Takes a Bech32 address and returns a normalized (i.e. lower case) representation of it.
 *
 * The input is validated along the way, which makes this significantly safer than
 * using `address.toLowerCase()`.
 *
 * @hidden
 */
export declare function normalizeBech32(address: Bech32Address): Bech32Address;
/**
 * Takes an indeterminate address type and returns an address
 *
 * @hidden
 */
export declare const addressify: (addressLike: AddressLike | ContractIdLike) => AbstractAddress;
/**
 * @hidden
 */
export declare const getRandomB256: () => string;
/**
 * Takes a B256 address and clears the first 12 bytes, this is required for an EVM Address
 *
 * @param b256 - the address to clear
 * @returns b256 with first 12 bytes cleared
 *
 * @hidden
 */
export declare const clearFirst12BytesFromB256: (b256: B256Address) => B256AddressEvm;
/**
 * Pads the first 12 bytes of an Evm address. This is useful for padding addresses returned from
 * the EVM to interact with the Sway EVM Address Type.
 *
 * @param address - Evm address to be padded
 * @returns Evm address padded to a b256 address
 *
 * @hidden
 */
export declare const padFirst12BytesOfEvmAddress: (address: string) => B256AddressEvm;
//# sourceMappingURL=utils.d.ts.map